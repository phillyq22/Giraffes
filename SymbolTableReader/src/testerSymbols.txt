
Symtab for file player.cpp
Compilation directory is /home/panties/Maximilian-master
Read from object file /home/panties/Giraffes/SymbolTableReader/src/tester (0x171c7c0)
Language: c++

Line table:

 line 39 at 0x402a9d
 line 47 at 0x402abc
 line 49 at 0x402ac4
 line 51 at 0x402acc
 line 52 at 0x402ad2
 line 53 at 0x402aee
 line 56 at 0x402b03
 line 57 at 0x402b0c
 line 58 at 0x402b18
 line 59 at 0x402b21
 line 58 at 0x402b45
 line 56 at 0x402b54
 line 62 at 0x402b60
 line 63 at 0x402b65
 line 67 at 0x402b67
 line 68 at 0x402b73
 line 113 at 0x402b78
 line 114 at 0x402b89
 line 115 at 0x402b9e
 line 117 at 0x402bad
 line 118 at 0x402bbe
 line 121 at 0x402bc8
 line 122 at 0x402bd4
 line 123 at 0x402be3
 line 124 at 0x402bec
 line 125 at 0x402bf3
 line 126 at 0x402bfc
 line 128 at 0x402c05
 line 132 at 0x402c3b
 line 134 at 0x402c86
 line 142 at 0x402c92
 line 143 at 0x402ca1
 line 147 at 0x402cb2
 line 153 at 0x402cbe
 line 156 at 0x402cda
 line 128 at 0x402cdf
 line 156 at 0x402ceb
 line 136 at 0x402d1d
 line 137 at 0x402d29
 line 138 at 0x402d40
 line 149 at 0x402d55
 line 150 at 0x402d61
 line 149 at 0x402d78
 line 128 at 0x402d85
 line 156 at 0x402d96
 line 157 at 0x402dad
 line 157 at 0x402db7
 line 157 at 0x402dc5
 line 0 at 0x402dd4
 line 157 at 0x402df2
 line 157 at 0x402df4
 line 157 at 0x402df8
 line 0 at 0x402e09

Blockvector:

block #000, object at 0x1885620, 35 syms/buckets in 0x402a9d..0x40352c
 class std::allocator<char> : public __gnu_cxx::new_allocator<char> {
   public:
     allocator(void);
     allocator(const std::allocator<char> &);
     ~allocator();

     typedef std::size_t size_type;
     typedef char &reference;
     typedef const char &const_reference;
 };

 std::_Ios_Fmtflags std::_S_floatfield; const 260 (0x104)
 std::_Ios_Iostate std::_S_eofbit; const 2 (0x2)
 struct __gnu_cxx::__alloc_traits<std::allocator<unsigned int> > {
   public:
     static __gnu_cxx::__alloc_traits<std::allocator<unsigned int> >::pointer allocate(std::allocator<unsigned int> &, __gnu_cxx::__alloc_traits<std::allocator<unsigned int> >::size_type);
     static void deallocate(std::allocator<unsigned int> &, __gnu_cxx::__alloc_traits<std::allocator<unsigned int> >::pointer, __gnu_cxx::__alloc_traits<std::allocator<unsigned int> >::size_type);
     static void destroy(std::allocator<unsigned int> &, __gnu_cxx::__alloc_traits<std::allocator<unsigned int> >::pointer);
     static __gnu_cxx::__alloc_traits<std::allocator<unsigned int> >::size_type max_size(const std::allocator<unsigned int> &);
     static const std::allocator<unsigned int> & _S_select_on_copy(const std::allocator<unsigned int> &);
     static void _S_on_swap(std::allocator<unsigned int> &, std::allocator<unsigned int> &);

     typedef std::allocator<unsigned int>::pointer pointer;
     typedef std::allocator<unsigned int>::const_pointer const_pointer;
     typedef std::allocator<unsigned int>::reference reference;
     typedef std::allocator<unsigned int>::const_reference const_reference;
     typedef std::allocator<unsigned int>::size_type size_type;
 };

 RtError::Type RtError::INVALID_USE; const 7 (0x7)
 RtAudio::Api RtAudio::UNIX_JACK; const 3 (0x3)
 class std::vector<unsigned int, std::allocator<unsigned int> > : protected std::_Vector_base<unsigned int, std::allocator<unsigned int> > {
   public:
     vector(void);
     vector(const std::vector<unsigned int, std::allocator<unsigned int> >::allocator_type &);
     vector(std::vector<unsigned int, std::allocator<unsigned int> >::size_type, const std::vector<unsigned int, std::allocator<unsigned int> >::value_type &, const std::vector<unsigned int, std::allocator<unsigned int> >::allocator_type &);
     vector(const std::vector<unsigned int, std::allocator<unsigned int> > &);
     ~vector();
     std::vector<unsigned int, std::allocator<unsigned int> > & operator=(const std::vector<unsigned int, std::allocator<unsigned int> > &);
     void assign(std::vector<unsigned int, std::allocator<unsigned int> >::size_type, const std::vector<unsigned int, std::allocator<unsigned int> >::value_type &);
     std::vector<unsigned int, std::allocator<unsigned int> >::iterator begin(void);
     std::vector<unsigned int, std::allocator<unsigned int> >::const_iterator begin(void) const;
     std::vector<unsigned int, std::allocator<unsigned int> >::iterator end(void);
     std::vector<unsigned int, std::allocator<unsigned int> >::const_iterator end(void) const;
     std::vector<unsigned int, std::allocator<unsigned int> >::reverse_iterator rbegin(void);
     std::vector<unsigned int, std::allocator<unsigned int> >::const_reverse_iterator rbegin(void) const;
     std::vector<unsigned int, std::allocator<unsigned int> >::reverse_iterator rend(void);
     std::vector<unsigned int, std::allocator<unsigned int> >::const_reverse_iterator rend(void) const;
     std::vector<unsigned int, std::allocator<unsigned int> >::size_type size(void) const;
     std::vector<unsigned int, std::allocator<unsigned int> >::size_type max_size(void) const;
     void resize(std::vector<unsigned int, std::allocator<unsigned int> >::size_type, std::vector<unsigned int, std::allocator<unsigned int> >::value_type);
     std::vector<unsigned int, std::allocator<unsigned int> >::size_type capacity(void) const;
     bool empty(void) const;
     void reserve(std::vector<unsigned int, std::allocator<unsigned int> >::size_type);
     std::vector<unsigned int, std::allocator<unsigned int> >::reference operator[](std::vector<unsigned int, std::allocator<unsigned int> >::size_type);
     std::vector<unsigned int, std::allocator<unsigned int> >::const_reference operator[](std::vector<unsigned int, std::allocator<unsigned int> >::size_type) const;
   protected:
     void _M_range_check(std::vector<unsigned int, std::allocator<unsigned int> >::size_type) const;
   public:
     std::vector<unsigned int, std::allocator<unsigned int> >::reference at(std::vector<unsigned int, std::allocator<unsigned int> >::size_type);
     std::vector<unsigned int, std::allocator<unsigned int> >::const_reference at(std::vector<unsigned int, std::allocator<unsigned int> >::size_type) const;
     std::vector<unsigned int, std::allocator<unsigned int> >::reference front(void);
     std::vector<unsigned int, std::allocator<unsigned int> >::const_reference front(void) const;
     std::vector<unsigned int, std::allocator<unsigned int> >::reference back(void);
     std::vector<unsigned int, std::allocator<unsigned int> >::const_reference back(void) const;
     std::vector<unsigned int, std::allocator<unsigned int> >::pointer data(void);
     std::vector<unsigned int, std::allocator<unsigned int> >::const_pointer data(void) const;
     void push_back(const std::vector<unsigned int, std::allocator<unsigned int> >::value_type &);
     void pop_back(void);
     std::vector<unsigned int, std::allocator<unsigned int> >::iterator insert(std::vector<unsigned int, std::allocator<unsigned int> >::iterator, const std::vector<unsigned int, std::allocator<unsigned int> >::value_type &);
     void insert(std::vector<unsigned int, std::allocator<unsigned int> >::iterator, std::vector<unsigned int, std::allocator<unsigned int> >::size_type, const std::vector<unsigned int, std::allocator<unsigned int> >::value_type &);
     std::vector<unsigned int, std::allocator<unsigned int> >::iterator erase(std::vector<unsigned int, std::allocator<unsigned int> >::iterator);
     std::vector<unsigned int, std::allocator<unsigned int> >::iterator erase(std::vector<unsigned int, std::allocator<unsigned int> >::iterator, std::vector<unsigned int, std::allocator<unsigned int> >::iterator);
     void swap(std::vector<unsigned int, std::allocator<unsigned int> > &);
     void clear(void);
   protected:
     void _M_fill_initialize(std::vector<unsigned int, std::allocator<unsigned int> >::size_type, const std::vector<unsigned int, std::allocator<unsigned int> >::value_type &);
     void _M_fill_assign(std::size_t, const std::vector<unsigned int, std::allocator<unsigned int> >::value_type &);
     void _M_fill_insert(std::vector<unsigned int, std::allocator<unsigned int> >::iterator, std::vector<unsigned int, std::allocator<unsigned int> >::size_type, const std::vector<unsigned int, std::allocator<unsigned int> >::value_type &);
     void _M_insert_aux(std::vector<unsigned int, std::allocator<unsigned int> >::iterator, const unsigned int &);
     std::vector<unsigned int, std::allocator<unsigned int> >::size_type _M_check_len(std::vector<unsigned int, std::allocator<unsigned int> >::size_type, const char *) const;
     void _M_erase_at_end(std::vector<unsigned int, std::allocator<unsigned int> >::pointer);

   public:
     typedef unsigned int value_type;
     typedef std::_Vector_base<unsigned int, std::allocator<unsigned int> >::pointer pointer;
     typedef __gnu_cxx::__alloc_traits<std::allocator<unsigned int> >::const_pointer const_pointer;
     typedef __gnu_cxx::__alloc_traits<std::allocator<unsigned int> >::reference reference;
     typedef __gnu_cxx::__alloc_traits<std::allocator<unsigned int> >::const_reference const_reference;
     typedef __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > iterator;
     typedef __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > const_iterator;
     typedef std::reverse_iterator<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > > const_reverse_iterator;
     typedef std::reverse_iterator<__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > > reverse_iterator;
     typedef std::size_t size_type;
     typedef std::allocator<unsigned int> allocator_type;
 };

 void std::allocator<double>::~allocator(); block object 0x18793a0, 0x402faa..0x402fc4
 void std::_Vector_base<double, std::allocator<double> >::_Vector_base(std::allocator<double> const&); block object 0x187fb80, 0x4030dc..0x403101
 void std::__uninitialized_fill_n_a<double*, unsigned long, double, double>(double*, unsigned long, double const&, std::allocator<double>&); block object 0x18826a0, 0x4033cc..0x4033fd
 class std::allocator<unsigned int> : public __gnu_cxx::new_allocator<unsigned int> {
   public:
     allocator(void);
     allocator(const std::allocator<unsigned int> &);
     ~allocator();

     typedef std::size_t size_type;
     typedef unsigned int *pointer;
     typedef const unsigned int *const_pointer;
     typedef unsigned int &reference;
     typedef const unsigned int &const_reference;
 };

 struct std::_Vector_base<unsigned int, std::allocator<unsigned int> > {
   public:
     std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl _M_impl;

     std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Tp_alloc_type & _M_get_Tp_allocator(void);
     const std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Tp_alloc_type & _M_get_Tp_allocator(void) const;
     std::_Vector_base<unsigned int, std::allocator<unsigned int> >::allocator_type get_allocator(void) const;
     _Vector_base(void);
     _Vector_base(const std::_Vector_base<unsigned int, std::allocator<unsigned int> >::allocator_type &);
     _Vector_base(std::size_t);
     _Vector_base(std::size_t, const std::_Vector_base<unsigned int, std::allocator<unsigned int> >::allocator_type &);
     ~_Vector_base();
     std::_Vector_base<unsigned int, std::allocator<unsigned int> >::pointer _M_allocate(std::size_t);
     void _M_deallocate(std::_Vector_base<unsigned int, std::allocator<unsigned int> >::pointer, std::size_t);
   private:
     void _M_create_storage(std::size_t);

   public:
     typedef __gnu_cxx::__alloc_traits<std::allocator<unsigned int> >::pointer pointer;
     typedef __gnu_cxx::__alloc_traits<std::allocator<unsigned int> >::rebind<unsigned int>::other _Tp_alloc_type;
     typedef std::allocator<unsigned int> allocator_type;
 };

 RtError::Type RtError::NO_DEVICES_FOUND; const 3 (0x3)
 enum RtAudio::Api {RtAudio::UNSPECIFIED, RtAudio::LINUX_ALSA, RtAudio::LINUX_OSS, RtAudio::UNIX_JACK, RtAudio::MACOSX_CORE, RtAudio::WINDOWS_ASIO, RtAudio::WINDOWS_DS, RtAudio::RTAUDIO_DUMMY};

 bool RtApi::isStreamOpen() const; block object 0x1875150, 0x402e34..0x402e4e
 unsigned int RtAudio::getDeviceCount(); block object 0x18753a0, 0x402e4e..0x402e91
 bool RtAudio::isStreamOpen() const; block object 0x1877eb0, 0x402f72..0x402f8f
 void __gnu_cxx::new_allocator<double>::~new_allocator(); block object 0x187f5b0, 0x4030b8..0x4030c2
 void std::uninitialized_fill_n<double*, unsigned long, double>(double*, unsigned long, double const&); block object 0x18832c0, 0x40342e..0x40345b
 std::_Ios_Fmtflags std::_S_fixed; const 4 (0x4)
 std::_Ios_Openmode std::_S_in; const 8 (0x8)
 const int __gnu_cxx::__numeric_traits_integer<int>::__max; const 2147483647 (0x7fffffff)
 const char __gnu_cxx::__numeric_traits_integer<char>::__max; const 127 (0x7f)
 const short __gnu_cxx::__numeric_traits_integer<short>::__max; const 32767 (0x7fff)
 const long __gnu_cxx::__numeric_traits_integer<long>::__max; const 9223372036854775807 (0x7fffffffffffffff)
 struct std::char_traits<char> {
   public:
     static void assign(std::char_traits<char>::char_type &, const std::char_traits<char>::char_type &);
     static std::char_traits<char>::char_type * assign(std::char_traits<char>::char_type *, std::size_t, std::char_traits<char>::char_type);
     static bool eq(const std::char_traits<char>::char_type &, const std::char_traits<char>::char_type &);
     static bool lt(const std::char_traits<char>::char_type &, const std::char_traits<char>::char_type &);
     static int compare(const std::char_traits<char>::char_type *, const std::char_traits<char>::char_type *, std::size_t);
     static std::size_t length(const std::char_traits<char>::char_type *);
     static const std::char_traits<char>::char_type * find(const std::char_traits<char>::char_type *, std::size_t, const std::char_traits<char>::char_type &);
     static std::char_traits<char>::char_type * move(std::char_traits<char>::char_type *, const std::char_traits<char>::char_type *, std::size_t);
     static std::char_traits<char>::char_type * copy(std::char_traits<char>::char_type *, const std::char_traits<char>::char_type *, std::size_t);
     static std::char_traits<char>::char_type to_char_type(const std::char_traits<char>::int_type &);
     static std::char_traits<char>::int_type to_int_type(const std::char_traits<char>::char_type &);
     static bool eq_int_type(const std::char_traits<char>::int_type &, const std::char_traits<char>::int_type &);
     static std::char_traits<char>::int_type eof(void);
     static std::char_traits<char>::int_type not_eof(const std::char_traits<char>::int_type &);

     typedef char char_type;
     typedef int int_type;
 };

 std::_Ios_Openmode std::_S_bin; const 4 (0x4)
 std::_Ios_Iostate std::_S_goodbit; const 0 (0x0)
 const int __gnu_cxx::__numeric_traits_integer<int>::__min; const -2147483648 (0xffffffff80000000)
 const short __gnu_cxx::__numeric_traits_integer<short>::__min; const -32768 (0xffffffffffff8000)
 const long __gnu_cxx::__numeric_traits_integer<long>::__min; const -9223372036854775808 (0x8000000000000000)
 struct _IO_FILE {
     int _flags;
     char *_IO_read_ptr;
     char *_IO_read_end;
     char *_IO_read_base;
     char *_IO_write_base;
     char *_IO_write_ptr;
     char *_IO_write_end;
     char *_IO_buf_base;
     char *_IO_buf_end;
     char *_IO_save_base;
     char *_IO_backup_base;
     char *_IO_save_end;
     _IO_marker *_markers;
     _IO_FILE *_chain;
     int _fileno;
     int _flags2;
     __off_t _old_offset;
     unsigned short _cur_column;
     signed char _vtable_offset;
     char _shortbuf[1];
     _IO_lock_t *_lock;
     __off64_t _offset;
     void *__pad1;
     void *__pad2;
     void *__pad3;
     void *__pad4;
     size_t __pad5;
     int _mode;
     char _unused2[20];
 };

 class std::basic_string<char, std::char_traits<char>, std::allocator<char> > {
   public:
     static const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type npos;
   private:
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider _M_dataplus;

     char * _M_data(void) const;
     char * _M_data(char *);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep * _M_rep(void) const;
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator _M_ibegin(void) const;
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator _M_iend(void) const;
     void _M_leak(void);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type _M_check(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, const char *) const;
     void _M_check_length(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, const char *) const;
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type _M_limit(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
     bool _M_disjunct(const char *) const;
     static void _M_copy(char *, const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type);
     static void _M_move(char *, const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type);
     static void _M_assign(char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, char);
     static void _S_copy_chars(char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator);
     static void _S_copy_chars(char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::const_iterator, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::const_iterator);
     static void _S_copy_chars(char *, char *, char *);
     static void _S_copy_chars(char *, const char *, const char *);
     static int _S_compare(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type);
     void _M_mutate(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type);
     void _M_leak_hard(void);
     static std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep & _S_empty_rep(void);
   public:
     basic_string(void);
     basic_string(const std::allocator<char> &);
     basic_string(const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &);
     basic_string(const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type);
     basic_string(const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, const std::allocator<char> &);
     basic_string(const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, const std::allocator<char> &);
     basic_string(const char *, const std::allocator<char> &);
     basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, char, const std::allocator<char> &);
     ~basic_string();
     std::basic_string<char, std::char_traits<char>, std::allocator<char> > & operator=(const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> > & operator=(const char *);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> > & operator=(char);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator begin(void);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::const_iterator begin(void) const;
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator end(void);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::const_iterator end(void) const;
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::reverse_iterator rbegin(void);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::const_reverse_iterator rbegin(void) const;
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::reverse_iterator rend(void);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::const_reverse_iterator rend(void) const;
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type size(void) const;
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type length(void) const;
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type max_size(void) const;
     void resize(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, char);
     void resize(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type capacity(void) const;
     void reserve(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type);
     void clear(void);
     bool empty(void) const;
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::const_reference operator[](std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::reference operator[](std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::const_reference at(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::reference at(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> > & operator+=(const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> > & operator+=(const char *);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> > & operator+=(char);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> > & append(const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> > & append(const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> > & append(const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> > & append(const char *);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> > & append(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, char);
     void push_back(char);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> > & assign(const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> > & assign(const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> > & assign(const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> > & assign(const char *);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> > & assign(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, char);
     void insert(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, char);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> > & insert(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> > & insert(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> > & insert(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> > & insert(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, const char *);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> > & insert(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, char);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator insert(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator, char);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> > & erase(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator erase(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator erase(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> > & replace(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> > & replace(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> > & replace(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> > & replace(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, const char *);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> > & replace(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, char);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> > & replace(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator, const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> > & replace(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator, const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> > & replace(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator, const char *);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> > & replace(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, char);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> > & replace(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator, char *, char *);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> > & replace(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator, const char *, const char *);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> > & replace(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> > & replace(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::const_iterator, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::const_iterator);
   private:
     std::basic_string<char, std::char_traits<char>, std::allocator<char> > & _M_replace_aux(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, char);
     std::basic_string<char, std::char_traits<char>, std::allocator<char> > & _M_replace_safe(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type);
     static char * _S_construct_aux_2(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, char, const std::allocator<char> &);
     static char * _S_construct(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, char, const std::allocator<char> &);
   public:
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type copy(char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
     void swap(std::basic_string<char, std::char_traits<char>, std::allocator<char> > &);
     const char * c_str(void) const;
     const char * data(void) const;
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::allocator_type get_allocator(void) const;
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type find(const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type find(const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type find(const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type find(char, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type rfind(const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type rfind(const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type rfind(const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type rfind(char, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type find_first_of(const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type find_first_of(const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type find_first_of(const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type find_first_of(char, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type find_last_of(const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type find_last_of(const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type find_last_of(const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type find_last_of(char, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type find_first_not_of(const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type find_first_not_of(const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type find_first_not_of(const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type find_first_not_of(char, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type find_last_not_of(const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type find_last_not_of(const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type find_last_not_of(const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type find_last_not_of(char, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
     std::basic_string<char, std::char_traits<char>, std::allocator<char> > substr(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
     int compare(const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &) const;
     int compare(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &) const;
     int compare(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
     int compare(const char *) const;
     int compare(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, const char *) const;
     int compare(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;

     typedef std::allocator<char>::size_type size_type;
     typedef std::allocator<char> allocator_type;
     typedef std::allocator<char>::reference reference;
     typedef std::allocator<char>::const_reference const_reference;
     typedef __gnu_cxx::__normal_iterator<char*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > iterator;
     typedef __gnu_cxx::__normal_iterator<char const*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > const_iterator;
     typedef std::reverse_iterator<__gnu_cxx::__normal_iterator<char const*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const_reverse_iterator;
     typedef std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > reverse_iterator;
 };

 std::_Ios_Fmtflags std::_S_boolalpha; const 1 (0x1)
 std::_Ios_Fmtflags std::_S_oct; const 64 (0x40)
 struct std::_Vector_base<double, std::allocator<double> > {
   public:
     std::_Vector_base<double, std::allocator<double> >::_Vector_impl _M_impl;

     std::_Vector_base<double, std::allocator<double> >::_Tp_alloc_type & _M_get_Tp_allocator(void);
     const std::_Vector_base<double, std::allocator<double> >::_Tp_alloc_type & _M_get_Tp_allocator(void) const;
     std::_Vector_base<double, std::allocator<double> >::allocator_type get_allocator(void) const;
     _Vector_base(void);
     _Vector_base(const std::_Vector_base<double, std::allocator<double> >::allocator_type &);
     _Vector_base(std::size_t);
     _Vector_base(std::size_t, const std::_Vector_base<double, std::allocator<double> >::allocator_type &);
     ~_Vector_base();
     std::_Vector_base<double, std::allocator<double> >::pointer _M_allocate(std::size_t);
     void _M_deallocate(std::_Vector_base<double, std::allocator<double> >::pointer, std::size_t);
   private:
     void _M_create_storage(std::size_t);

   public:
     typedef __gnu_cxx::__alloc_traits<std::allocator<double> >::pointer pointer;
     typedef __gnu_cxx::__alloc_traits<std::allocator<double> >::rebind<double>::other _Tp_alloc_type;
     typedef std::allocator<double> allocator_type;
 };

 RtAudio::Api RtAudio::MACOSX_CORE; const 4 (0x4)
 void std::_Destroy<double*>(double*, double*); block object 0x1881890, 0x40331c..0x403341
 unsigned long __gnu_cxx::new_allocator<double>::max_size() const; block object 0x1882e50, 0x40341a..0x40342e
 std::_Ios_Openmode std::_S_ios_openmode_end; const 65536 (0x10000)
 enum std::_Ios_Openmode {std::_S_app = 1, std::_S_ate, std::_S_bin = 4, std::_S_in = 8, std::_S_out = 16, std::_S_trunc = 32, std::_S_ios_openmode_end = 65536};

 std::_Ios_Seekdir std::_S_end; const 2 (0x2)
 struct std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl : public std::allocator<unsigned int> {
     std::_Vector_base<unsigned int, std::allocator<unsigned int> >::pointer _M_start;
     std::_Vector_base<unsigned int, std::allocator<unsigned int> >::pointer _M_finish;
     std::_Vector_base<unsigned int, std::allocator<unsigned int> >::pointer _M_end_of_storage;
   public:
     _Vector_impl(void);
     _Vector_impl(const std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Tp_alloc_type &);
     void _M_swap_data(std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl &);
 };

 struct std::_Vector_base<double, std::allocator<double> >::_Vector_impl : public std::allocator<double> {
     std::_Vector_base<double, std::allocator<double> >::pointer _M_start;
     std::_Vector_base<double, std::allocator<double> >::pointer _M_finish;
     std::_Vector_base<double, std::allocator<double> >::pointer _M_end_of_storage;
   public:
     _Vector_impl(void);
     _Vector_impl(const std::_Vector_base<double, std::allocator<double> >::_Tp_alloc_type &);
     void _M_swap_data(std::_Vector_base<double, std::allocator<double> >::_Vector_impl &);
 };

 RtError::Type RtError::INVALID_PARAMETER; const 6 (0x6)
 RtError::Type RtError::DRIVER_ERROR; const 8 (0x8)
 void RtAudio::closeStream(); block object 0x1875800, 0x402ed6..0x402f19
 void RtAudio::stopStream(); block object 0x1875c60, 0x402f46..0x402f71
 void std::_Vector_base<double, std::allocator<double> >::_Vector_impl::_Vector_impl(std::allocator<double> const&); block object 0x1880b50, 0x40321c..0x403264
 struct std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep_base {
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type _M_length;
     std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type _M_capacity;
     _Atomic_word _M_refcount;
 };

 struct lldiv_t {
     long long quot;
     long long rem;
 };

 struct RtAudio::StreamOptions {
     RtAudioStreamFlags flags;
     unsigned int numberOfBuffers;
     std::string streamName;
     int priority;
   public:
     StreamOptions(void);
 };

 RtApi::StreamState RtApi::STREAM_RUNNING; const 1 (0x1)
 enum RtApi::StreamState {RtApi::STREAM_STOPPED, RtApi::STREAM_RUNNING, RtApi::STREAM_CLOSED = -50};

 std::_Ios_Fmtflags std::_S_uppercase; const 16384 (0x4000)
 std::_Ios_Seekdir std::_S_beg; const 0 (0x0)
 typedef namespace __gnu_cxx __gnu_cxx; 
 std::_Ios_Fmtflags std::_S_hex; const 8 (0x8)
 std::_Ios_Fmtflags std::_S_scientific; const 256 (0x100)
 std::_Ios_Iostate std::_S_badbit; const 1 (0x1)
 struct _G_fpos_t {
     __off_t __pos;
     __mbstate_t __state;
 };

 int routing(void*, void*, unsigned int, double, unsigned int, void*); block object 0x18785f0, 0x402a9d..0x402b67
 struct std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider : public std::allocator<char> {
     char *_M_p;
   public:
     _Alloc_hider(char *, const std::allocator<char> &);
 };

 std::_Ios_Openmode std::_S_app; const 1 (0x1)
 struct std::_Iter_base<double*, false> {
   public:
     static std::_Iter_base<double*, false>::iterator_type _S_base(double *);

     typedef double *iterator_type;
 };

 class std::basic_istream<char, std::char_traits<char> > {
     <incomplete type>
 } std::cin; unresolved
 struct __gnu_cxx::__numeric_traits_integer<short> {
     static const short __min;
     static const short __max;
     static const bool __is_signed;
     static const int __digits;
 };

 struct div_t {
     int quot;
     int rem;
 };

 class RtError : public std::exception {
   protected:
     std::string message_;
     RtError::Type type_;

   public:
     RtError(const std::string &, RtError::Type);
     ~RtError();
     virtual void printMessage(void) const;
     virtual const RtError::Type & getType(void) const;
     virtual const std::string & getMessage(void) const;
     virtual const char * what(void) const;
 };

 void std::_Destroy<double*, double>(double*, double*, std::allocator<double>&); block object 0x1880830, 0x4031f2..0x40321b
 std::_Ios_Fmtflags std::_S_skipws; const 4096 (0x1000)
 struct std::iterator_traits<unsigned int const*> {
     typedef std::ptrdiff_t difference_type;
     typedef const unsigned int *pointer;
     typedef const unsigned int &reference;
 };

 class std::basic_ostream<char, std::char_traits<char> > {
     <incomplete type>
 } std::cout; unresolved
 struct _IO_marker {
     _IO_marker *_next;
     _IO_FILE *_sbuf;
     int _pos;
 };

 struct ldiv_t {
     long quot;
     long rem;
 };

 double *__gnu_cxx::new_allocator<double>::allocate(unsigned long, void const*); block object 0x1882190, 0x40338a..0x4033cc
 double *std::__fill_n_a<double*, unsigned long, double>(double*, unsigned long, double const&); block object 0x1884540, 0x4034d7..0x40351e
 struct __mbstate_t {
     int __count;
     union {
         unsigned int __wch;
         char __wchb[4];
     } __value;
 };

 std::_Ios_Fmtflags std::_S_showpoint; const 1024 (0x400)
 RtError::Type RtError::THREAD_ERROR; const 10 (0xa)
 RtAudio::Api RtAudio::WINDOWS_DS; const 6 (0x6)
 void std::vector<double, std::allocator<double> >::_M_fill_initialize(unsigned long, double const&); block object 0x1881560, 0x4032d0..0x40331c
 void std::__uninitialized_fill_n<true>::__uninit_fill_n<double*, unsigned long, double>(double*, unsigned long, double const&); block object 0x1883760, 0x40345b..0x403488
 double *std::__niter_base<double*>(double*); block object 0x1883ee0, 0x4034bd..0x4034d7
 std::_Ios_Fmtflags std::_S_internal; const 16 (0x10)
 enum std::_Ios_Iostate {std::_S_goodbit, std::_S_badbit, std::_S_eofbit, std::_S_failbit = 4, std::_S_ios_iostate_end = 65536};

 struct lconv {
     char *decimal_point;
     char *thousands_sep;
     char *grouping;
     char *int_curr_symbol;
     char *currency_symbol;
     char *mon_decimal_point;
     char *mon_thousands_sep;
     char *mon_grouping;
     char *positive_sign;
     char *negative_sign;
     char int_frac_digits;
     char frac_digits;
     char p_cs_precedes;
     char p_sep_by_space;
     char n_cs_precedes;
     char n_sep_by_space;
     char p_sign_posn;
     char n_sign_posn;
     char int_p_cs_precedes;
     char int_p_sep_by_space;
     char int_n_cs_precedes;
     char int_n_sep_by_space;
     char int_p_sign_posn;
     char int_n_sign_posn;
 };

 void std::vector<double, std::allocator<double> >::_M_initialize_dispatch<int>(int, int, std::__true_type); block object 0x1880200, 0x403174..0x4031e3
 struct std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep : public std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep_base {
     static const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type _S_max_size;
     static const char _S_terminal;
     static unsigned long _S_empty_rep_storage[];
   public:
     static std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep & _S_empty_rep(void);
     bool _M_is_leaked(void) const;
     bool _M_is_shared(void) const;
     void _M_set_leaked(void);
     void _M_set_sharable(void);
     void _M_set_length_and_sharable(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type);
     char * _M_refdata(void);
     char * _M_grab(const std::allocator<char> &, const std::allocator<char> &);
     static std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep * _S_create(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, const std::allocator<char> &);
     void _M_dispose(const std::allocator<char> &);
     void _M_destroy(const std::allocator<char> &);
     char * _M_refcopy(void);
     char * _M_clone(const std::allocator<char> &, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type);
 };

 std::_Ios_Fmtflags std::_S_left; const 32 (0x20)
 std::_Ios_Seekdir std::_S_cur; const 1 (0x1)
 class __gnu_cxx::new_allocator<double> {
   public:
     new_allocator(void);
     new_allocator(const __gnu_cxx::new_allocator<double> &);
     ~new_allocator();
     __gnu_cxx::new_allocator<double>::pointer address(__gnu_cxx::new_allocator<double>::reference) const;
     __gnu_cxx::new_allocator<double>::const_pointer address(__gnu_cxx::new_allocator<double>::const_reference) const;
     __gnu_cxx::new_allocator<double>::pointer allocate(__gnu_cxx::new_allocator<double>::size_type, const void *);
     void deallocate(__gnu_cxx::new_allocator<double>::pointer, __gnu_cxx::new_allocator<double>::size_type);
     __gnu_cxx::new_allocator<double>::size_type max_size(void) const;
     void construct(__gnu_cxx::new_allocator<double>::pointer, const double &);
     void destroy(__gnu_cxx::new_allocator<double>::pointer);

     typedef std::size_t size_type;
     typedef double *pointer;
     typedef const double *const_pointer;
     typedef double &reference;
     typedef const double &const_reference;
 };

 RtError::Type RtError::SYSTEM_ERROR; const 9 (0x9)
 void RtAudio::startStream(); block object 0x1875a30, 0x402f1a..0x402f45
 double &std::vector<double, std::allocator<double> >::operator[](unsigned long); block object 0x187f0e0, 0x40308e..0x4030ae
 std::_Ios_Fmtflags std::_S_showpos; const 2048 (0x800)
 class std::ios_base::Init {
   private:
     static _Atomic_word _S_refcount;
     static bool _S_synced_with_stdio;

   public:
     Init(void);
     ~Init();
 };

 struct __gnu_cxx::__numeric_traits_integer<int> {
     static const int __min;
     static const int __max;
     static const bool __is_signed;
     static const int __digits;
 };

 RtError::Type RtError::DEBUG_WARNING; const 1 (0x1)
 enum RtError::Type {RtError::WARNING, RtError::DEBUG_WARNING, RtError::UNSPECIFIED, RtError::NO_DEVICES_FOUND, RtError::INVALID_DEVICE, RtError::MEMORY_ERROR, RtError::INVALID_PARAMETER, RtError::INVALID_USE, RtError::DRIVER_ERROR, RtError::SYSTEM_ERROR, RtError::THREAD_ERROR};

 RtAudio::Api RtAudio::LINUX_ALSA; const 1 (0x1)
 typedef namespace __gnu_debug __gnu_debug; 
 class std::allocator<double> : public __gnu_cxx::new_allocator<double> {
   public:
     allocator(void);
     allocator(const std::allocator<double> &);
     ~allocator();

     typedef std::size_t size_type;
     typedef double *pointer;
     typedef const double *const_pointer;
     typedef double &reference;
     typedef const double &const_reference;
 } &std::_Vector_base<double, std::allocator<double> >::_M_get_Tp_allocator(); block object 0x1880450, 0x4031e4..0x4031f2
 double *std::_Vector_base<double, std::allocator<double> >::_M_allocate(unsigned long); block object 0x18811c0, 0x403298..0x4032d0
 struct __gnu_cxx::__numeric_traits_integer<long> {
     static const long __min;
     static const long __max;
     static const bool __is_signed;
     static const int __digits;
 };

 class __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > {
   protected:
     const unsigned int *_M_current;

   public:
     __normal_iterator(void);
     __normal_iterator(const unsigned int * const&);
     __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >::reference operator*(void) const;
     __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >::pointer operator->(void) const;
     __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > & operator++(void);
     __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > operator++(int);
     __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > & operator--(void);
     __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > operator--(int);
     __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >::reference operator[](const __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >::difference_type &) const;
     __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > & operator+=(const __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >::difference_type &);
     __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > operator+(const __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >::difference_type &) const;
     __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > & operator-=(const __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >::difference_type &);
     __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > operator-(const __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >::difference_type &) const;
     const unsigned int * const& base(void) const;

     typedef std::iterator_traits<unsigned int const*>::difference_type difference_type;
     typedef std::iterator_traits<unsigned int const*>::reference reference;
     typedef std::iterator_traits<unsigned int const*>::pointer pointer;
 };

 RtError::Type RtError::UNSPECIFIED; const 2 (0x2)
 RtAudio::Api RtAudio::UNSPECIFIED; const 0 (0x0)
 void __gnu_cxx::new_allocator<double>::deallocate(double*, unsigned long); block object 0x1881eb0, 0x403368..0x40338a
 std::_Ios_Fmtflags std::_S_showbase; const 512 (0x200)
 class std::vector<double, std::allocator<double> > : protected std::_Vector_base<double, std::allocator<double> > {
   public:
     vector(void);
     vector(const std::vector<double, std::allocator<double> >::allocator_type &);
     vector(std::vector<double, std::allocator<double> >::size_type, const std::vector<double, std::allocator<double> >::value_type &, const std::vector<double, std::allocator<double> >::allocator_type &);
     vector(const std::vector<double, std::allocator<double> > &);
     ~vector();
     std::vector<double, std::allocator<double> > & operator=(const std::vector<double, std::allocator<double> > &);
     void assign(std::vector<double, std::allocator<double> >::size_type, const std::vector<double, std::allocator<double> >::value_type &);
     std::vector<double, std::allocator<double> >::iterator begin(void);
     std::vector<double, std::allocator<double> >::const_iterator begin(void) const;
     std::vector<double, std::allocator<double> >::iterator end(void);
     std::vector<double, std::allocator<double> >::const_iterator end(void) const;
     std::vector<double, std::allocator<double> >::reverse_iterator rbegin(void);
     std::vector<double, std::allocator<double> >::const_reverse_iterator rbegin(void) const;
     std::vector<double, std::allocator<double> >::reverse_iterator rend(void);
     std::vector<double, std::allocator<double> >::const_reverse_iterator rend(void) const;
     std::vector<double, std::allocator<double> >::size_type size(void) const;
     std::vector<double, std::allocator<double> >::size_type max_size(void) const;
     void resize(std::vector<double, std::allocator<double> >::size_type, std::vector<double, std::allocator<double> >::value_type);
     std::vector<double, std::allocator<double> >::size_type capacity(void) const;
     bool empty(void) const;
     void reserve(std::vector<double, std::allocator<double> >::size_type);
     std::vector<double, std::allocator<double> >::reference operator[](std::vector<double, std::allocator<double> >::size_type);
     std::vector<double, std::allocator<double> >::const_reference operator[](std::vector<double, std::allocator<double> >::size_type) const;
   protected:
     void _M_range_check(std::vector<double, std::allocator<double> >::size_type) const;
   public:
     std::vector<double, std::allocator<double> >::reference at(std::vector<double, std::allocator<double> >::size_type);
     std::vector<double, std::allocator<double> >::const_reference at(std::vector<double, std::allocator<double> >::size_type) const;
     std::vector<double, std::allocator<double> >::reference front(void);
     std::vector<double, std::allocator<double> >::const_reference front(void) const;
     std::vector<double, std::allocator<double> >::reference back(void);
     std::vector<double, std::allocator<double> >::const_reference back(void) const;
     std::vector<double, std::allocator<double> >::pointer data(void);
     std::vector<double, std::allocator<double> >::const_pointer data(void) const;
     void push_back(const std::vector<double, std::allocator<double> >::value_type &);
     void pop_back(void);
     std::vector<double, std::allocator<double> >::iterator insert(std::vector<double, std::allocator<double> >::iterator, const std::vector<double, std::allocator<double> >::value_type &);
     void insert(std::vector<double, std::allocator<double> >::iterator, std::vector<double, std::allocator<double> >::size_type, const std::vector<double, std::allocator<double> >::value_type &);
     std::vector<double, std::allocator<double> >::iterator erase(std::vector<double, std::allocator<double> >::iterator);
     std::vector<double, std::allocator<double> >::iterator erase(std::vector<double, std::allocator<double> >::iterator, std::vector<double, std::allocator<double> >::iterator);
     void swap(std::vector<double, std::allocator<double> > &);
     void clear(void);
   protected:
     void _M_fill_initialize(std::vector<double, std::allocator<double> >::size_type, const std::vector<double, std::allocator<double> >::value_type &);
     void _M_fill_assign(std::size_t, const std::vector<double, std::allocator<double> >::value_type &);
     void _M_fill_insert(std::vector<double, std::allocator<double> >::iterator, std::vector<double, std::allocator<double> >::size_type, const std::vector<double, std::allocator<double> >::value_type &);
     void _M_insert_aux(std::vector<double, std::allocator<double> >::iterator, const double &);
     std::vector<double, std::allocator<double> >::size_type _M_check_len(std::vector<double, std::allocator<double> >::size_type, const char *) const;
     void _M_erase_at_end(std::vector<double, std::allocator<double> >::pointer);
   public:
     void vector<int>(int, int, const std::vector<double, std::allocator<double> >::allocator_type &);
   protected:
     void _M_initialize_dispatch<int>(int, int, std::__true_type);

   public:
     typedef double value_type;
     typedef std::_Vector_base<double, std::allocator<double> >::pointer pointer;
     typedef __gnu_cxx::__alloc_traits<std::allocator<double> >::const_pointer const_pointer;
     typedef __gnu_cxx::__alloc_traits<std::allocator<double> >::reference reference;
     typedef __gnu_cxx::__alloc_traits<std::allocator<double> >::const_reference const_reference;
     typedef __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > iterator;
     typedef __gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > > const_iterator;
     typedef std::reverse_iterator<__gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > > > const_reverse_iterator;
     typedef std::reverse_iterator<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > > reverse_iterator;
     typedef std::size_t size_type;
     typedef std::allocator<double> allocator_type;
 };

 class __gnu_cxx::new_allocator<unsigned int> {
   public:
     new_allocator(void);
     new_allocator(const __gnu_cxx::new_allocator<unsigned int> &);
     ~new_allocator();
     __gnu_cxx::new_allocator<unsigned int>::pointer address(__gnu_cxx::new_allocator<unsigned int>::reference) const;
     __gnu_cxx::new_allocator<unsigned int>::const_pointer address(__gnu_cxx::new_allocator<unsigned int>::const_reference) const;
     __gnu_cxx::new_allocator<unsigned int>::pointer allocate(__gnu_cxx::new_allocator<unsigned int>::size_type, const void *);
     void deallocate(__gnu_cxx::new_allocator<unsigned int>::pointer, __gnu_cxx::new_allocator<unsigned int>::size_type);
     __gnu_cxx::new_allocator<unsigned int>::size_type max_size(void) const;
     void construct(__gnu_cxx::new_allocator<unsigned int>::pointer, const unsigned int &);
     void destroy(__gnu_cxx::new_allocator<unsigned int>::pointer);

     typedef std::size_t size_type;
     typedef unsigned int *pointer;
     typedef const unsigned int *const_pointer;
     typedef unsigned int &reference;
     typedef const unsigned int &const_reference;
 };

 RtError::Type RtError::WARNING; const 0 (0x0)
 class RtAudio {
   protected:
     RtApi *rtapi_;

   public:
     static void getCompiledApi(std::vector<RtAudio::Api, std::allocator<RtAudio::Api> > &);
     RtAudio(RtAudio::Api);
     ~RtAudio();
     RtAudio::Api getCurrentApi(void);
     unsigned int getDeviceCount(void);
     RtAudio::DeviceInfo getDeviceInfo(unsigned int);
     unsigned int getDefaultOutputDevice(void);
     unsigned int getDefaultInputDevice(void);
     void openStream(RtAudio::StreamParameters *, RtAudio::StreamParameters *, RtAudioFormat, unsigned int, unsigned int *, RtAudioCallback, void *, RtAudio::StreamOptions *);
     void closeStream(void);
     void startStream(void);
     void stopStream(void);
     void abortStream(void);
     bool isStreamOpen(void) const;
     bool isStreamRunning(void) const;
     double getStreamTime(void);
     long getStreamLatency(void);
     unsigned int getStreamSampleRate(void);
     void showWarnings(bool);
   protected:
     void openRtApi(RtAudio::Api);
 };

 void *__dso_handle; unresolved
 const int __gnu_cxx::__numeric_traits_integer<unsigned long>::__digits; const 64 (0x40)
 std::_Ios_Fmtflags std::_S_unitbuf; const 8192 (0x2000)
 std::_Ios_Fmtflags std::_S_basefield; const 74 (0x4a)
 std::_Ios_Openmode std::_S_out; const 16 (0x10)
 std::_Ios_Iostate std::_S_failbit; const 4 (0x4)
 class std::allocator<double> : public __gnu_cxx::new_allocator<double> {
   public:
     allocator(void);
     allocator(const std::allocator<double> &);
     ~allocator();

     typedef std::size_t size_type;
     typedef double *pointer;
     typedef const double *const_pointer;
     typedef double &reference;
     typedef const double &const_reference;
 };

 RtApi::StreamState RtApi::STREAM_CLOSED; const -50 (0xffffffffffffffce)
 double *std::_Iter_base<double*, false>::_S_base(double*); block object 0x18847a0, 0x40351e..0x40352c
 struct typedef __va_list_tag __va_list_tag {
     unsigned int gp_offset;
     unsigned int fp_offset;
     void *overflow_arg_area;
     void *reg_save_area;
 };

 struct tm {
     int tm_sec;
     int tm_min;
     int tm_hour;
     int tm_mday;
     int tm_mon;
     int tm_year;
     int tm_wday;
     int tm_yday;
     int tm_isdst;
     long tm_gmtoff;
     const char *tm_zone;
 };

 RtAudio::Api RtAudio::RTAUDIO_DUMMY; const 7 (0x7)
 RtApi::StreamState RtApi::STREAM_STOPPED; const 0 (0x0)
 void std::vector<double, std::allocator<double> >::~vector(); block object 0x187ee20, 0x403028..0x40308d
 void std::_Vector_base<double, std::allocator<double> >::~_Vector_base(); block object 0x187fe30, 0x403102..0x403173
 std::_Ios_Fmtflags std::_S_dec; const 2 (0x2)
 std::_Ios_Openmode std::_S_ate; const 2 (0x2)
 std::_Ios_Iostate std::_S_ios_iostate_end; const 65536 (0x10000)
 void std::vector<double, std::allocator<double> >::vector<int>(int, int, std::allocator<double> const&); block object 0x18798a0, 0x402fc4..0x403028
 struct std::__true_type {
     <no data fields>
 };

 std::_Ios_Fmtflags std::_S_right; const 128 (0x80)
 std::_Ios_Fmtflags std::_S_ios_fmtflags_end; const 65536 (0x10000)
 enum std::_Ios_Fmtflags {std::_S_boolalpha = 1, std::_S_dec, std::_S_fixed = 4, std::_S_hex = 8, std::_S_internal = 16, std::_S_left = 32, std::_S_oct = 64, std::_S_right = 128, std::_S_scientific = 256, std::_S_showbase = 512, std::_S_showpoint = 1024, std::_S_showpos = 2048, std::_S_skipws = 4096, std::_S_unitbuf = 8192, std::_S_uppercase = 16384, std::_S_adjustfield = 176, std::_S_basefield = 74, std::_S_floatfield = 260, std::_S_ios_fmtflags_end = 65536};

 struct __gnu_cxx::__numeric_traits_integer<unsigned long> {
     static const unsigned long __min;
     static const unsigned long __max;
     static const bool __is_signed;
     static const int __digits;
 };

 void __gnu_cxx::new_allocator<double>::new_allocator(); block object 0x187f330, 0x4030ae..0x4030b8
 void __gnu_cxx::new_allocator<double>::new_allocator(__gnu_cxx::new_allocator<double> const&); block object 0x1882bb0, 0x40340c..0x40341a
 enum std::_Ios_Seekdir {std::_S_beg, std::_S_cur, std::_S_end, std::_S_ios_seekdir_end = 65536};

 RtAudio::Api RtAudio::WINDOWS_ASIO; const 5 (0x5)
 void std::_Destroy_aux<true>::__destroy<double*>(double*, double*); block object 0x1882910, 0x4033fd..0x40340b
 typedef namespace std::__debug std::__debug; 
 struct std::__uninitialized_fill_n<true> {
   public:
     static void __uninit_fill_n<double*, unsigned long, double>(double *, unsigned long, const double &);
 };

 std::_Ios_Seekdir std::_S_ios_seekdir_end; const 65536 (0x10000)
 struct std::_Destroy_aux<true> {
   public:
     static void __destroy<double*>(double *, double *);
 };

 struct __gnu_cxx::__alloc_traits<std::allocator<double> > {
   public:
     static __gnu_cxx::__alloc_traits<std::allocator<double> >::pointer allocate(std::allocator<double> &, __gnu_cxx::__alloc_traits<std::allocator<double> >::size_type);
     static void deallocate(std::allocator<double> &, __gnu_cxx::__alloc_traits<std::allocator<double> >::pointer, __gnu_cxx::__alloc_traits<std::allocator<double> >::size_type);
     static void destroy(std::allocator<double> &, __gnu_cxx::__alloc_traits<std::allocator<double> >::pointer);
     static __gnu_cxx::__alloc_traits<std::allocator<double> >::size_type max_size(const std::allocator<double> &);
     static const std::allocator<double> & _S_select_on_copy(const std::allocator<double> &);
     static void _S_on_swap(std::allocator<double> &, std::allocator<double> &);

     typedef std::allocator<double>::pointer pointer;
     typedef std::allocator<double>::const_pointer const_pointer;
     typedef std::allocator<double>::reference reference;
     typedef std::allocator<double>::const_reference const_reference;
     typedef std::allocator<double>::size_type size_type;
 };

 void std::_Vector_base<double, std::allocator<double> >::_Vector_impl::~_Vector_impl(); block object 0x187f850, 0x4030c2..0x4030dc
 struct std::allocator<unsigned int>::rebind<unsigned int> {
     typedef std::allocator<unsigned int> other;
 };

 struct __gnu_cxx::__alloc_traits<std::allocator<unsigned int> >::rebind<unsigned int> {
     typedef std::allocator<unsigned int>::rebind<unsigned int>::other other;
 };

 void std::_Vector_base<double, std::allocator<double> >::_M_deallocate(double*, unsigned long); block object 0x1880ef0, 0x403264..0x403298
 struct __gnu_cxx::__numeric_traits_integer<char> {
     static const char __min;
     static const char __max;
     static const bool __is_signed;
     static const int __digits;
 };

 RtError::Type RtError::MEMORY_ERROR; const 5 (0x5)
 struct RtAudio::StreamParameters {
     unsigned int deviceId;
     unsigned int nChannels;
     unsigned int firstChannel;
   public:
     StreamParameters(void);
 };

 void RtAudio::StreamParameters::StreamParameters(); block object 0x1874df0, 0x402e0a..0x402e34
 typedef namespace std std; 
 class __gnu_cxx::new_allocator<char> {
   public:
     new_allocator(void);
     new_allocator(const __gnu_cxx::new_allocator<char> &);
     ~new_allocator();
     __gnu_cxx::new_allocator<char>::pointer address(__gnu_cxx::new_allocator<char>::reference) const;
     __gnu_cxx::new_allocator<char>::const_pointer address(__gnu_cxx::new_allocator<char>::const_reference) const;
     __gnu_cxx::new_allocator<char>::pointer allocate(__gnu_cxx::new_allocator<char>::size_type, const void *);
     void deallocate(__gnu_cxx::new_allocator<char>::pointer, __gnu_cxx::new_allocator<char>::size_type);
     __gnu_cxx::new_allocator<char>::size_type max_size(void) const;
     void construct(__gnu_cxx::new_allocator<char>::pointer, const char &);
     void destroy(__gnu_cxx::new_allocator<char>::pointer);

     typedef std::size_t size_type;
     typedef char *pointer;
     typedef const char *const_pointer;
     typedef char &reference;
     typedef const char &const_reference;
 };

 int main(); block object 0x1878ee0, 0x402b67..0x402db7 section .text
 struct RtAudio::DeviceInfo {
     bool probed;
     std::string name;
     unsigned int outputChannels;
     unsigned int inputChannels;
     unsigned int duplexChannels;
     bool isDefaultOutput;
     bool isDefaultInput;
     std::vector<unsigned int, std::allocator<unsigned int> > sampleRates;
     RtAudioFormat nativeFormats;
   public:
     DeviceInfo(void);
 };

 std::_Ios_Fmtflags std::_S_adjustfield; const 176 (0xb0)
 struct __gnu_cxx::__enable_if<true, double*> {
     typedef double *__type;
 };

 RtError::Type RtError::INVALID_DEVICE; const 4 (0x4)
 unsigned int RtAudio::getDefaultOutputDevice(); block object 0x18755d0, 0x402e92..0x402ed5
 std::_Ios_Openmode std::_S_trunc; const 32 (0x20)
 struct std::allocator<double>::rebind<double> {
     typedef std::allocator<double> other;
 };

 class std::basic_ostream<char, std::char_traits<char> > {
     <incomplete type>
 } std::cerr; unresolved
 struct __gnu_cxx::__alloc_traits<std::allocator<double> >::rebind<double> {
     typedef std::allocator<double>::rebind<double>::other other;
 };

 RtAudio::Api RtAudio::LINUX_OSS; const 2 (0x2)
 void std::allocator<double>::allocator(); block object 0x1879120, 0x402f90..0x402faa
 void std::allocator<double>::allocator(std::allocator<double> const&); block object 0x1881bb0, 0x403342..0x403367
 double *std::fill_n<double*, unsigned long, double>(double*, unsigned long, double const&); block object 0x1883c00, 0x403488..0x4034bd
  block #001, object at 0x18854b0 under 0x1885620, 31 syms/buckets in 0x402a9d..0x40352c
   typedef int _Atomic_word; 
   typedef struct div_t {
       int quot;
       int rem;
   } div_t; 
   typedef unsigned int RtAudioStreamStatus; 
   const unsigned int RTAUDIO_HOG_DEVICE; static at 0x40cd38 section .rodata
   typedef unsigned int unsigned int; 
   typedef unsigned long std::allocator<char>::size_type; 
   typedef unsigned long std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type; 
   typedef unsigned long std::vector<double, std::allocator<double> >::size_type; 
   typedef unsigned long std::allocator<unsigned int>::size_type; 
   typedef unsigned long std::vector<unsigned int, std::allocator<unsigned int> >::size_type; 
   typedef unsigned long std::allocator<double>::size_type; 
   typedef class std::basic_ostream<char, std::char_traits<char> > {
       <incomplete type>
   } std::ostream; 
   typedef float float; 
   typedef unsigned long __gnu_cxx::new_allocator<char>::size_type; 
   typedef unsigned long __gnu_cxx::new_allocator<unsigned int>::size_type; 
   typedef unsigned long __gnu_cxx::__alloc_traits<std::allocator<unsigned int> >::size_type; 
   typedef unsigned long __gnu_cxx::new_allocator<double>::size_type; 
   typedef unsigned long __gnu_cxx::__alloc_traits<std::allocator<double> >::size_type; 
   typedef struct ldiv_t {
       long quot;
       long rem;
   } ldiv_t; 
   typedef struct _IO_FILE {
       int _flags;
       char *_IO_read_ptr;
       char *_IO_read_end;
       char *_IO_read_base;
       char *_IO_write_base;
       char *_IO_write_ptr;
       char *_IO_write_end;
       char *_IO_buf_base;
       char *_IO_buf_end;
       char *_IO_save_base;
       char *_IO_backup_base;
       char *_IO_save_end;
       _IO_marker *_markers;
       _IO_FILE *_chain;
       int _fileno;
       int _flags2;
       __off_t _old_offset;
       unsigned short _cur_column;
       signed char _vtable_offset;
       char _shortbuf[1];
       _IO_lock_t *_lock;
       __off64_t _offset;
       void *__pad1;
       void *__pad2;
       void *__pad3;
       void *__pad4;
       size_t __pad5;
       int _mode;
       char _unused2[20];
   } FILE; 
   typedef unsigned long size_t; 
   typedef unsigned long std::size_t; 
   typedef class __gnu_cxx::__normal_iterator<char const*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > {
       <incomplete type>
   } std::basic_string<char, std::char_traits<char>, std::allocator<char> >::const_iterator; 
   typedef class __gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > > {
     protected:
       const double *_M_current;

     public:
       __normal_iterator(void);
       __normal_iterator(const double * const&);
       __gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > >::reference operator*(void) const;
       __gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > >::pointer operator->(void) const;
       __gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > > & operator++(void);
       __gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > > operator++(int);
       __gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > > & operator--(void);
       __gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > > operator--(int);
       __gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > >::reference operator[](const __gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > >::difference_type &) const;
       __gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > > & operator+=(const __gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > >::difference_type &);
       __gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > > operator+(const __gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > >::difference_type &) const;
       __gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > > & operator-=(const __gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > >::difference_type &);
       __gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > > operator-(const __gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > >::difference_type &) const;
       const double * const& base(void) const;

       typedef std::iterator_traits<double const*>::difference_type difference_type;
       typedef std::iterator_traits<double const*>::reference reference;
       typedef std::iterator_traits<double const*>::pointer pointer;
   } std::vector<double, std::allocator<double> >::const_iterator; 
   typedef class std::allocator<unsigned int> : public __gnu_cxx::new_allocator<unsigned int> {
     public:
       allocator(void);
       allocator(const std::allocator<unsigned int> &);
       ~allocator();

       typedef std::size_t size_type;
       typedef unsigned int *pointer;
       typedef const unsigned int *const_pointer;
       typedef unsigned int &reference;
       typedef const unsigned int &const_reference;
   } std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Tp_alloc_type; 
   typedef class __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > {
     protected:
       const unsigned int *_M_current;

     public:
       __normal_iterator(void);
       __normal_iterator(const unsigned int * const&);
       __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >::reference operator*(void) const;
       __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >::pointer operator->(void) const;
       __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > & operator++(void);
       __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > operator++(int);
       __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > & operator--(void);
       __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > operator--(int);
       __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >::reference operator[](const __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >::difference_type &) const;
       __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > & operator+=(const __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >::difference_type &);
       __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > operator+(const __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >::difference_type &) const;
       __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > & operator-=(const __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >::difference_type &);
       __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > operator-(const __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >::difference_type &) const;
       const unsigned int * const& base(void) const;

       typedef std::iterator_traits<unsigned int const*>::difference_type difference_type;
       typedef std::iterator_traits<unsigned int const*>::reference reference;
       typedef std::iterator_traits<unsigned int const*>::pointer pointer;
   } std::vector<unsigned int, std::allocator<unsigned int> >::const_iterator; 
   typedef class std::allocator<double> : public __gnu_cxx::new_allocator<double> {
     public:
       allocator(void);
       allocator(const std::allocator<double> &);
       ~allocator();

       typedef std::size_t size_type;
       typedef double *pointer;
       typedef const double *const_pointer;
       typedef double &reference;
       typedef const double &const_reference;
   } std::_Vector_base<double, std::allocator<double> >::_Tp_alloc_type; 
   const unsigned long RTAUDIO_SINT16; static at 0x40cd08 section .rodata
   typedef class std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > {
       <incomplete type>
   } std::basic_string<char, std::char_traits<char>, std::allocator<char> >::reverse_iterator; 
   typedef class std::reverse_iterator<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > > {
       <incomplete type>
   } std::vector<double, std::allocator<double> >::reverse_iterator; 
   typedef class std::reverse_iterator<__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > > {
       <incomplete type>
   } std::vector<unsigned int, std::allocator<unsigned int> >::reverse_iterator; 
   typedef class std::basic_istream<char, std::char_traits<char> > {
       <incomplete type>
   } std::istream; 
   typedef int (*__compar_fn_t)(const void *, const void *); 
   typedef unsigned char unsigned char; 
   typedef long __off_t; 
   typedef struct _G_fpos_t {
       __off_t __pos;
       __mbstate_t __state;
   } fpos_t; 
   const unsigned long RTAUDIO_SINT24; static at 0x40cd10 section .rodata
   typedef unsigned long wctype_t; 
   const unsigned int RTAUDIO_INPUT_OVERFLOW; static at 0x40cd44 section .rodata
   typedef int int; 
   const unsigned long RTAUDIO_FLOAT64; static at 0x40cd28 section .rodata
   typedef double *std::vector<double, std::allocator<double> >::pointer; 
   typedef unsigned int *std::allocator<unsigned int>::pointer; 
   typedef unsigned int *std::_Vector_base<unsigned int, std::allocator<unsigned int> >::pointer; 
   typedef unsigned int *std::vector<unsigned int, std::allocator<unsigned int> >::pointer; 
   typedef double *std::allocator<double>::pointer; 
   typedef double *std::_Vector_base<double, std::allocator<double> >::pointer; 
   typedef const unsigned int *std::iterator_traits<unsigned int const*>::pointer; 
   typedef wchar_t wchar_t; 
   typedef char *__gnu_cxx::new_allocator<char>::pointer; 
   typedef unsigned int *__gnu_cxx::new_allocator<unsigned int>::pointer; 
   typedef unsigned int *__gnu_cxx::__alloc_traits<std::allocator<unsigned int> >::pointer; 
   typedef const unsigned int *__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >::pointer; 
   typedef double *__gnu_cxx::new_allocator<double>::pointer; 
   typedef double *__gnu_cxx::__alloc_traits<std::allocator<double> >::pointer; 
   typedef int (*RtAudioCallback)(void *, void *, unsigned int, double, RtAudioStreamStatus, void *); 
   const unsigned long RTAUDIO_SINT32; static at 0x40cd18 section .rodata
   typedef struct _IO_FILE {
       int _flags;
       char *_IO_read_ptr;
       char *_IO_read_end;
       char *_IO_read_base;
       char *_IO_write_base;
       char *_IO_write_ptr;
       char *_IO_write_end;
       char *_IO_buf_base;
       char *_IO_buf_end;
       char *_IO_save_base;
       char *_IO_backup_base;
       char *_IO_save_end;
       _IO_marker *_markers;
       _IO_FILE *_chain;
       int _fileno;
       int _flags2;
       __off_t _old_offset;
       unsigned short _cur_column;
       signed char _vtable_offset;
       char _shortbuf[1];
       _IO_lock_t *_lock;
       __off64_t _offset;
       void *__pad1;
       void *__pad2;
       void *__pad3;
       void *__pad4;
       size_t __pad5;
       int _mode;
       char _unused2[20];
   } __FILE; 
   typedef double *__gnu_cxx::__enable_if<true, double*>::__type; 
   typedef unsigned short unsigned short; 
   typedef const char &std::allocator<char>::const_reference; 
   typedef const char &std::basic_string<char, std::char_traits<char>, std::allocator<char> >::const_reference; 
   typedef class std::reverse_iterator<__gnu_cxx::__normal_iterator<char const*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > {
       <incomplete type>
   } std::basic_string<char, std::char_traits<char>, std::allocator<char> >::const_reverse_iterator; 
   typedef const double &std::vector<double, std::allocator<double> >::const_reference; 
   typedef class std::reverse_iterator<__gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > > > {
       <incomplete type>
   } std::vector<double, std::allocator<double> >::const_reverse_iterator; 
   typedef const unsigned int &std::allocator<unsigned int>::const_reference; 
   typedef const unsigned int &std::vector<unsigned int, std::allocator<unsigned int> >::const_reference; 
   typedef class std::reverse_iterator<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > > {
       <incomplete type>
   } std::vector<unsigned int, std::allocator<unsigned int> >::const_reverse_iterator; 
   typedef const double &std::allocator<double>::const_reference; 
   typedef const char &__gnu_cxx::new_allocator<char>::const_reference; 
   typedef const unsigned int &__gnu_cxx::new_allocator<unsigned int>::const_reference; 
   typedef const unsigned int &__gnu_cxx::__alloc_traits<std::allocator<unsigned int> >::const_reference; 
   typedef const double &__gnu_cxx::new_allocator<double>::const_reference; 
   typedef const double &__gnu_cxx::__alloc_traits<std::allocator<double> >::const_reference; 
   typedef struct lldiv_t {
       long long quot;
       long long rem;
   } lldiv_t; 
   typedef long long long long; 
   typedef int __int32_t; 
   typedef const int *wctrans_t; 
   typedef char &std::allocator<char>::reference; 
   typedef char &std::basic_string<char, std::char_traits<char>, std::allocator<char> >::reference; 
   typedef double &std::vector<double, std::allocator<double> >::reference; 
   typedef unsigned int &std::allocator<unsigned int>::reference; 
   typedef unsigned int &std::vector<unsigned int, std::allocator<unsigned int> >::reference; 
   typedef double &std::allocator<double>::reference; 
   typedef const unsigned int &std::iterator_traits<unsigned int const*>::reference; 
   typedef long long; 
   typedef char &__gnu_cxx::new_allocator<char>::reference; 
   typedef unsigned int &__gnu_cxx::new_allocator<unsigned int>::reference; 
   typedef unsigned int &__gnu_cxx::__alloc_traits<std::allocator<unsigned int> >::reference; 
   typedef const unsigned int &__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >::reference; 
   typedef double &__gnu_cxx::new_allocator<double>::reference; 
   typedef double &__gnu_cxx::__alloc_traits<std::allocator<double> >::reference; 
   typedef bool bool; 
   typedef void _IO_lock_t; 
   void _GLOBAL__sub_I__Z7routingPvS_jdjS_(); block object 0x1884c00, 0x402df4..0x402e09
   typedef double *std::_Iter_base<double*, false>::iterator_type; 
   typedef struct _G_fpos_t {
       __off_t __pos;
       __mbstate_t __state;
   } _G_fpos_t; 
   const unsigned int RTAUDIO_OUTPUT_UNDERFLOW; static at 0x40cd48 section .rodata
   class std::ios_base::Init {
     private:
       static _Atomic_word _S_refcount;
       static bool _S_synced_with_stdio;

     public:
       Init(void);
       ~Init();
   } std::__ioinit; static at 0x6155f1 section .bss
   typedef enum std::_Ios_Seekdir {std::_S_beg, std::_S_cur, std::_S_end, std::_S_ios_seekdir_end = 65536} std::ios_base::seekdir; 
   typedef unsigned long long unsigned long long; 
   typedef class std::allocator<char> : public __gnu_cxx::new_allocator<char> {
     public:
       allocator(void);
       allocator(const std::allocator<char> &);
       ~allocator();

       typedef std::size_t size_type;
       typedef char &reference;
       typedef const char &const_reference;
   } std::basic_string<char, std::char_traits<char>, std::allocator<char> >::allocator_type; 
   typedef class std::allocator<double> : public __gnu_cxx::new_allocator<double> {
     public:
       allocator(void);
       allocator(const std::allocator<double> &);
       ~allocator();

       typedef std::size_t size_type;
       typedef double *pointer;
       typedef const double *const_pointer;
       typedef double &reference;
       typedef const double &const_reference;
   } std::vector<double, std::allocator<double> >::allocator_type; 
   typedef class std::allocator<unsigned int> : public __gnu_cxx::new_allocator<unsigned int> {
     public:
       allocator(void);
       allocator(const std::allocator<unsigned int> &);
       ~allocator();

       typedef std::size_t size_type;
       typedef unsigned int *pointer;
       typedef const unsigned int *const_pointer;
       typedef unsigned int &reference;
       typedef const unsigned int &const_reference;
   } std::_Vector_base<unsigned int, std::allocator<unsigned int> >::allocator_type; 
   typedef class std::allocator<unsigned int> : public __gnu_cxx::new_allocator<unsigned int> {
     public:
       allocator(void);
       allocator(const std::allocator<unsigned int> &);
       ~allocator();

       typedef std::size_t size_type;
       typedef unsigned int *pointer;
       typedef const unsigned int *const_pointer;
       typedef unsigned int &reference;
       typedef const unsigned int &const_reference;
   } std::vector<unsigned int, std::allocator<unsigned int> >::allocator_type; 
   typedef class std::allocator<double> : public __gnu_cxx::new_allocator<double> {
     public:
       allocator(void);
       allocator(const std::allocator<double> &);
       ~allocator();

       typedef std::size_t size_type;
       typedef double *pointer;
       typedef const double *const_pointer;
       typedef double &reference;
       typedef const double &const_reference;
   } std::_Vector_base<double, std::allocator<double> >::allocator_type; 
   const unsigned int RTAUDIO_MINIMIZE_LATENCY; static at 0x40cd34 section .rodata
   typedef sizetype sizetype; 
   typedef struct __mbstate_t {
       int __count;
       union {
           unsigned int __wch;
           char __wchb[4];
       } __value;
   } __mbstate_t; 
   typedef enum std::_Ios_Iostate {std::_S_goodbit, std::_S_badbit, std::_S_eofbit, std::_S_failbit = 4, std::_S_ios_iostate_end = 65536} std::ios_base::iostate; 
   typedef double double; 
   typedef short short; 
   typedef signed char signed char; 
   typedef long __off64_t; 
   const unsigned int RTAUDIO_NONINTERLEAVED; static at 0x40cd30 section .rodata
   typedef enum std::_Ios_Openmode {std::_S_app = 1, std::_S_ate, std::_S_bin = 4, std::_S_in = 8, std::_S_out = 16, std::_S_trunc = 32, std::_S_ios_openmode_end = 65536} std::ios_base::openmode; 
   typedef class std::allocator<unsigned int> : public __gnu_cxx::new_allocator<unsigned int> {
     public:
       allocator(void);
       allocator(const std::allocator<unsigned int> &);
       ~allocator();

       typedef std::size_t size_type;
       typedef unsigned int *pointer;
       typedef const unsigned int *const_pointer;
       typedef unsigned int &reference;
       typedef const unsigned int &const_reference;
   } std::allocator<unsigned int>::rebind<unsigned int>::other; 
   typedef class std::allocator<double> : public __gnu_cxx::new_allocator<double> {
     public:
       allocator(void);
       allocator(const std::allocator<double> &);
       ~allocator();

       typedef std::size_t size_type;
       typedef double *pointer;
       typedef const double *const_pointer;
       typedef double &reference;
       typedef const double &const_reference;
   } std::allocator<double>::rebind<double>::other; 
   typedef class std::allocator<unsigned int> : public __gnu_cxx::new_allocator<unsigned int> {
     public:
       allocator(void);
       allocator(const std::allocator<unsigned int> &);
       ~allocator();

       typedef std::size_t size_type;
       typedef unsigned int *pointer;
       typedef const unsigned int *const_pointer;
       typedef unsigned int &reference;
       typedef const unsigned int &const_reference;
   } __gnu_cxx::__alloc_traits<std::allocator<unsigned int> >::rebind<unsigned int>::other; 
   typedef class std::allocator<double> : public __gnu_cxx::new_allocator<double> {
     public:
       allocator(void);
       allocator(const std::allocator<double> &);
       ~allocator();

       typedef std::size_t size_type;
       typedef double *pointer;
       typedef const double *const_pointer;
       typedef double &reference;
       typedef const double &const_reference;
   } __gnu_cxx::__alloc_traits<std::allocator<double> >::rebind<double>::other; 
   const unsigned long RTAUDIO_FLOAT32; static at 0x40cd20 section .rodata
   typedef char std::char_traits<char>::char_type; 
   typedef enum std::_Ios_Fmtflags {std::_S_boolalpha = 1, std::_S_dec, std::_S_fixed = 4, std::_S_hex = 8, std::_S_internal = 16, std::_S_left = 32, std::_S_oct = 64, std::_S_right = 128, std::_S_scientific = 256, std::_S_showbase = 512, std::_S_showpoint = 1024, std::_S_showpos = 2048, std::_S_skipws = 4096, std::_S_unitbuf = 8192, std::_S_uppercase = 16384, std::_S_adjustfield = 176, std::_S_basefield = 74, std::_S_floatfield = 260, std::_S_ios_fmtflags_end = 65536} std::ios_base::fmtflags; 
   const unsigned int RTAUDIO_ALSA_USE_DEFAULT; static at 0x40cd40 section .rodata
   typedef char char; 
   typedef long std::ptrdiff_t; 
   typedef class std::basic_string<char, std::char_traits<char>, std::allocator<char> > {
     public:
       static const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type npos;
     private:
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider _M_dataplus;

       char * _M_data(void) const;
       char * _M_data(char *);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep * _M_rep(void) const;
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator _M_ibegin(void) const;
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator _M_iend(void) const;
       void _M_leak(void);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type _M_check(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, const char *) const;
       void _M_check_length(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, const char *) const;
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type _M_limit(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
       bool _M_disjunct(const char *) const;
       static void _M_copy(char *, const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type);
       static void _M_move(char *, const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type);
       static void _M_assign(char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, char);
       static void _S_copy_chars(char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator);
       static void _S_copy_chars(char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::const_iterator, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::const_iterator);
       static void _S_copy_chars(char *, char *, char *);
       static void _S_copy_chars(char *, const char *, const char *);
       static int _S_compare(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type);
       void _M_mutate(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type);
       void _M_leak_hard(void);
       static std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep & _S_empty_rep(void);
     public:
       basic_string(void);
       basic_string(const std::allocator<char> &);
       basic_string(const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &);
       basic_string(const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type);
       basic_string(const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, const std::allocator<char> &);
       basic_string(const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, const std::allocator<char> &);
       basic_string(const char *, const std::allocator<char> &);
       basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, char, const std::allocator<char> &);
       ~basic_string();
       std::basic_string<char, std::char_traits<char>, std::allocator<char> > & operator=(const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> > & operator=(const char *);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> > & operator=(char);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator begin(void);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::const_iterator begin(void) const;
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator end(void);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::const_iterator end(void) const;
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::reverse_iterator rbegin(void);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::const_reverse_iterator rbegin(void) const;
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::reverse_iterator rend(void);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::const_reverse_iterator rend(void) const;
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type size(void) const;
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type length(void) const;
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type max_size(void) const;
       void resize(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, char);
       void resize(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type capacity(void) const;
       void reserve(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type);
       void clear(void);
       bool empty(void) const;
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::const_reference operator[](std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::reference operator[](std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::const_reference at(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::reference at(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> > & operator+=(const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> > & operator+=(const char *);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> > & operator+=(char);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> > & append(const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> > & append(const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> > & append(const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> > & append(const char *);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> > & append(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, char);
       void push_back(char);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> > & assign(const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> > & assign(const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> > & assign(const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> > & assign(const char *);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> > & assign(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, char);
       void insert(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, char);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> > & insert(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> > & insert(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> > & insert(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> > & insert(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, const char *);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> > & insert(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, char);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator insert(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator, char);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> > & erase(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator erase(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator erase(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> > & replace(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> > & replace(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> > & replace(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> > & replace(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, const char *);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> > & replace(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, char);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> > & replace(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator, const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> > & replace(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator, const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> > & replace(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator, const char *);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> > & replace(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, char);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> > & replace(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator, char *, char *);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> > & replace(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator, const char *, const char *);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> > & replace(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> > & replace(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::const_iterator, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::const_iterator);
     private:
       std::basic_string<char, std::char_traits<char>, std::allocator<char> > & _M_replace_aux(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, char);
       std::basic_string<char, std::char_traits<char>, std::allocator<char> > & _M_replace_safe(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type);
       static char * _S_construct_aux_2(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, char, const std::allocator<char> &);
       static char * _S_construct(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, char, const std::allocator<char> &);
     public:
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type copy(char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
       void swap(std::basic_string<char, std::char_traits<char>, std::allocator<char> > &);
       const char * c_str(void) const;
       const char * data(void) const;
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::allocator_type get_allocator(void) const;
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type find(const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type find(const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type find(const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type find(char, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type rfind(const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type rfind(const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type rfind(const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type rfind(char, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type find_first_of(const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type find_first_of(const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type find_first_of(const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type find_first_of(char, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type find_last_of(const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type find_last_of(const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type find_last_of(const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type find_last_of(char, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type find_first_not_of(const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type find_first_not_of(const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type find_first_not_of(const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type find_first_not_of(char, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type find_last_not_of(const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type find_last_not_of(const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type find_last_not_of(const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
       std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type find_last_not_of(char, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
       std::basic_string<char, std::char_traits<char>, std::allocator<char> > substr(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
       int compare(const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &) const;
       int compare(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &) const;
       int compare(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, const std::basic_string<char, std::char_traits<char>, std::allocator<char> > &, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;
       int compare(const char *) const;
       int compare(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, const char *) const;
       int compare(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type, const char *, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type) const;

       typedef std::allocator<char>::size_type size_type;
       typedef std::allocator<char> allocator_type;
       typedef std::allocator<char>::reference reference;
       typedef std::allocator<char>::const_reference const_reference;
       typedef __gnu_cxx::__normal_iterator<char*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > iterator;
       typedef __gnu_cxx::__normal_iterator<char const*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > const_iterator;
       typedef std::reverse_iterator<__gnu_cxx::__normal_iterator<char const*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const_reverse_iterator;
       typedef std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > reverse_iterator;
   } std::string; 
   typedef const double *std::vector<double, std::allocator<double> >::const_pointer; 
   typedef const unsigned int *std::allocator<unsigned int>::const_pointer; 
   typedef const unsigned int *std::vector<unsigned int, std::allocator<unsigned int> >::const_pointer; 
   typedef const double *std::allocator<double>::const_pointer; 
   typedef const char *__gnu_cxx::new_allocator<char>::const_pointer; 
   typedef const unsigned int *__gnu_cxx::new_allocator<unsigned int>::const_pointer; 
   typedef const unsigned int *__gnu_cxx::__alloc_traits<std::allocator<unsigned int> >::const_pointer; 
   typedef const double *__gnu_cxx::new_allocator<double>::const_pointer; 
   typedef const double *__gnu_cxx::__alloc_traits<std::allocator<double> >::const_pointer; 
   const unsigned long RTAUDIO_SINT8; static at 0x40cd00 section .rodata
   typedef unsigned long unsigned long; 
   typedef int std::char_traits<char>::int_type; 
   typedef unsigned int RtAudioStreamFlags; 
   typedef unsigned int wint_t; 
   typedef class __gnu_cxx::__normal_iterator<char*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > {
       <incomplete type>
   } std::basic_string<char, std::char_traits<char>, std::allocator<char> >::iterator; 
   typedef double std::vector<double, std::allocator<double> >::value_type; 
   typedef class __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > {
     protected:
       double *_M_current;

     public:
       __normal_iterator(void);
       __normal_iterator(double * const&);
       __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::reference operator*(void) const;
       __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::pointer operator->(void) const;
       __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > & operator++(void);
       __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > operator++(int);
       __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > & operator--(void);
       __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > operator--(int);
       __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::reference operator[](const __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::difference_type &) const;
       __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > & operator+=(const __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::difference_type &);
       __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > operator+(const __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::difference_type &) const;
       __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > & operator-=(const __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::difference_type &);
       __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > operator-(const __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::difference_type &) const;
       double * const& base(void) const;

       typedef std::iterator_traits<double*>::difference_type difference_type;
       typedef std::iterator_traits<double*>::reference reference;
       typedef std::iterator_traits<double*>::pointer pointer;
   } std::vector<double, std::allocator<double> >::iterator; 
   typedef unsigned int std::vector<unsigned int, std::allocator<unsigned int> >::value_type; 
   typedef class __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > {
       <incomplete type>
   } std::vector<unsigned int, std::allocator<unsigned int> >::iterator; 
   const unsigned int RTAUDIO_SCHEDULE_REALTIME; static at 0x40cd3c section .rodata
   typedef struct __mbstate_t {
       int __count;
       union {
           unsigned int __wch;
           char __wchb[4];
       } __value;
   } mbstate_t; 
   typedef long std::iterator_traits<unsigned int const*>::difference_type; 
   typedef long __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >::difference_type; 
   typedef long double long double; 
   typedef unsigned long RtAudioFormat; 
   void __static_initialization_and_destruction_0(int, int); block object 0x1884a60, 0x402db7..0x402df4
    block #002, object at 0x18785f0 under 0x18854b0, 6 syms/buckets in 0x402a9d..0x402b67, function routing(void*, void*, unsigned int, double, unsigned int, void*)
     void *outputBuffer; computed at runtime
     void *inputBuffer; computed at runtime
     unsigned int nBufferFrames; computed at runtime
     double streamTime; computed at runtime
     unsigned int status; computed at runtime
     void *userData; computed at runtime
      block #003, object at 0x1878570 under 0x18785f0, 1 syms/buckets in 0x402abc..0x402b65
       unsigned int i; computed at runtime
       unsigned int j; computed at runtime
       double *buffer; computed at runtime
       double *lastValues; computed at runtime
    block #004, object at 0x1878ee0 under 0x18854b0, 0 syms/buckets in 0x402b67..0x402db7, function main()
      block #005, object at 0x1878e60 under 0x1878ee0, 2 syms/buckets in 0x402b73..0x402dad
       struct RtAudio::StreamParameters {
           unsigned int deviceId;
           unsigned int nChannels;
           unsigned int firstChannel;
         public:
           StreamParameters(void);
       } parameters; computed at runtime
       unsigned int sampleRate; computed at runtime
       unsigned int bufferFrames; computed at runtime
       class std::vector<double, std::allocator<double> > : protected std::_Vector_base<double, std::allocator<double> > {
         public:
           vector(void);
           vector(const std::vector<double, std::allocator<double> >::allocator_type &);
           vector(std::vector<double, std::allocator<double> >::size_type, const std::vector<double, std::allocator<double> >::value_type &, const std::vector<double, std::allocator<double> >::allocator_type &);
           vector(const std::vector<double, std::allocator<double> > &);
           ~vector();
           std::vector<double, std::allocator<double> > & operator=(const std::vector<double, std::allocator<double> > &);
           void assign(std::vector<double, std::allocator<double> >::size_type, const std::vector<double, std::allocator<double> >::value_type &);
           std::vector<double, std::allocator<double> >::iterator begin(void);
           std::vector<double, std::allocator<double> >::const_iterator begin(void) const;
           std::vector<double, std::allocator<double> >::iterator end(void);
           std::vector<double, std::allocator<double> >::const_iterator end(void) const;
           std::vector<double, std::allocator<double> >::reverse_iterator rbegin(void);
           std::vector<double, std::allocator<double> >::const_reverse_iterator rbegin(void) const;
           std::vector<double, std::allocator<double> >::reverse_iterator rend(void);
           std::vector<double, std::allocator<double> >::const_reverse_iterator rend(void) const;
           std::vector<double, std::allocator<double> >::size_type size(void) const;
           std::vector<double, std::allocator<double> >::size_type max_size(void) const;
           void resize(std::vector<double, std::allocator<double> >::size_type, std::vector<double, std::allocator<double> >::value_type);
           std::vector<double, std::allocator<double> >::size_type capacity(void) const;
           bool empty(void) const;
           void reserve(std::vector<double, std::allocator<double> >::size_type);
           std::vector<double, std::allocator<double> >::reference operator[](std::vector<double, std::allocator<double> >::size_type);
           std::vector<double, std::allocator<double> >::const_reference operator[](std::vector<double, std::allocator<double> >::size_type) const;
         protected:
           void _M_range_check(std::vector<double, std::allocator<double> >::size_type) const;
         public:
           std::vector<double, std::allocator<double> >::reference at(std::vector<double, std::allocator<double> >::size_type);
           std::vector<double, std::allocator<double> >::const_reference at(std::vector<double, std::allocator<double> >::size_type) const;
           std::vector<double, std::allocator<double> >::reference front(void);
           std::vector<double, std::allocator<double> >::const_reference front(void) const;
           std::vector<double, std::allocator<double> >::reference back(void);
           std::vector<double, std::allocator<double> >::const_reference back(void) const;
           std::vector<double, std::allocator<double> >::pointer data(void);
           std::vector<double, std::allocator<double> >::const_pointer data(void) const;
           void push_back(const std::vector<double, std::allocator<double> >::value_type &);
           void pop_back(void);
           std::vector<double, std::allocator<double> >::iterator insert(std::vector<double, std::allocator<double> >::iterator, const std::vector<double, std::allocator<double> >::value_type &);
           void insert(std::vector<double, std::allocator<double> >::iterator, std::vector<double, std::allocator<double> >::size_type, const std::vector<double, std::allocator<double> >::value_type &);
           std::vector<double, std::allocator<double> >::iterator erase(std::vector<double, std::allocator<double> >::iterator);
           std::vector<double, std::allocator<double> >::iterator erase(std::vector<double, std::allocator<double> >::iterator, std::vector<double, std::allocator<double> >::iterator);
           void swap(std::vector<double, std::allocator<double> > &);
           void clear(void);
         protected:
           void _M_fill_initialize(std::vector<double, std::allocator<double> >::size_type, const std::vector<double, std::allocator<double> >::value_type &);
           void _M_fill_assign(std::size_t, const std::vector<double, std::allocator<double> >::value_type &);
           void _M_fill_insert(std::vector<double, std::allocator<double> >::iterator, std::vector<double, std::allocator<double> >::size_type, const std::vector<double, std::allocator<double> >::value_type &);
           void _M_insert_aux(std::vector<double, std::allocator<double> >::iterator, const double &);
           std::vector<double, std::allocator<double> >::size_type _M_check_len(std::vector<double, std::allocator<double> >::size_type, const char *) const;
           void _M_erase_at_end(std::vector<double, std::allocator<double> >::pointer);
         public:
           void vector<int>(int, int, const std::vector<double, std::allocator<double> >::allocator_type &);
         protected:
           void _M_initialize_dispatch<int>(int, int, std::__true_type);

         public:
           typedef double value_type;
           typedef std::_Vector_base<double, std::allocator<double> >::pointer pointer;
           typedef __gnu_cxx::__alloc_traits<std::allocator<double> >::const_pointer const_pointer;
           typedef __gnu_cxx::__alloc_traits<std::allocator<double> >::reference reference;
           typedef __gnu_cxx::__alloc_traits<std::allocator<double> >::const_reference const_reference;
           typedef __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > iterator;
           typedef __gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > > const_iterator;
           typedef std::reverse_iterator<__gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > > > const_reverse_iterator;
           typedef std::reverse_iterator<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > > reverse_iterator;
           typedef std::size_t size_type;
           typedef std::allocator<double> allocator_type;
       } data; computed at runtime
       class RtAudio {
         protected:
           RtApi *rtapi_;

         public:
           static void getCompiledApi(std::vector<RtAudio::Api, std::allocator<RtAudio::Api> > &);
           RtAudio(RtAudio::Api);
           ~RtAudio();
           RtAudio::Api getCurrentApi(void);
           unsigned int getDeviceCount(void);
           RtAudio::DeviceInfo getDeviceInfo(unsigned int);
           unsigned int getDefaultOutputDevice(void);
           unsigned int getDefaultInputDevice(void);
           void openStream(RtAudio::StreamParameters *, RtAudio::StreamParameters *, RtAudioFormat, unsigned int, unsigned int *, RtAudioCallback, void *, RtAudio::StreamOptions *);
           void closeStream(void);
           void startStream(void);
           void stopStream(void);
           void abortStream(void);
           bool isStreamOpen(void) const;
           bool isStreamRunning(void) const;
           double getStreamTime(void);
           long getStreamLatency(void);
           unsigned int getStreamSampleRate(void);
           void showWarnings(bool);
         protected:
           void openRtApi(RtAudio::Api);
       } dac; computed at runtime
       char input; computed at runtime
        block #006, object at 0x1878ac0 under 0x1878e60, 1 syms/buckets in 0x402b9e..0x402bc8
         char input; computed at runtime
        block #007, object at 0x1878cd0 under 0x1878e60, 1 syms/buckets in 0x402d1d..0x402d55
         class RtError : public std::exception {
           protected:
             std::string message_;
             RtError::Type type_;

           public:
             RtError(const std::string &, RtError::Type);
             ~RtError();
             virtual void printMessage(void) const;
             virtual const RtError::Type & getType(void) const;
             virtual const std::string & getMessage(void) const;
             virtual const char * what(void) const;
         } &e; computed at runtime
        block #008, object at 0x1878de0 under 0x1878e60, 1 syms/buckets in 0x402d55..0x402d85
         class RtError : public std::exception {
           protected:
             std::string message_;
             RtError::Type type_;

           public:
             RtError(const std::string &, RtError::Type);
             ~RtError();
             virtual void printMessage(void) const;
             virtual const RtError::Type & getType(void) const;
             virtual const std::string & getMessage(void) const;
             virtual const char * what(void) const;
         } &e; computed at runtime
    block #009, object at 0x1884a60 under 0x18854b0, 2 syms/buckets in 0x402db7..0x402df4, function __static_initialization_and_destruction_0(int, int)
     int __initialize_p; computed at runtime
     int __priority; computed at runtime
    block #010, object at 0x1884c00 under 0x18854b0, 0 syms/buckets in 0x402df4..0x402e09, function _GLOBAL__sub_I__Z7routingPvS_jdjS_()
    block #011, object at 0x1874df0 under 0x18854b0, 1 syms/buckets in 0x402e0a..0x402e34, function RtAudio::StreamParameters::StreamParameters()
     struct RtAudio::StreamParameters {
         unsigned int deviceId;
         unsigned int nChannels;
         unsigned int firstChannel;
       public:
         StreamParameters(void);
     } * const this; computed at runtime
    block #012, object at 0x1875150 under 0x18854b0, 1 syms/buckets in 0x402e34..0x402e4e, function RtApi::isStreamOpen() const
     const class RtApi {
       protected:
         static const unsigned int MAX_SAMPLE_RATES;
         static const unsigned int SAMPLE_RATES[14];
         std::ostringstream errorStream_;
         std::string errorText_;
         bool showWarnings_;
         RtApi::RtApiStream stream_;

       public:
         RtApi(void);
         ~RtApi();
         virtual RtAudio::Api getCurrentApi(void);
         virtual unsigned int getDeviceCount(void);
         virtual RtAudio::DeviceInfo getDeviceInfo(unsigned int);
         virtual unsigned int getDefaultInputDevice(void);
         virtual unsigned int getDefaultOutputDevice(void);
         void openStream(RtAudio::StreamParameters *, RtAudio::StreamParameters *, RtAudioFormat, unsigned int, unsigned int *, RtAudioCallback, void *, RtAudio::StreamOptions *);
         virtual void closeStream(void);
         virtual void startStream(void);
         virtual void stopStream(void);
         virtual void abortStream(void);
         long getStreamLatency(void);
         unsigned int getStreamSampleRate(void);
         virtual double getStreamTime(void);
         bool isStreamOpen(void) const;
         bool isStreamRunning(void) const;
         void showWarnings(bool);
       protected:
         virtual bool probeDeviceOpen(unsigned int, RtApi::StreamMode, unsigned int, unsigned int, unsigned int, RtAudioFormat, unsigned int *, RtAudio::StreamOptions *);
         void tickStreamTime(void);
         void clearStreamInfo(void);
         void verifyStream(void);
         void error(RtError::Type);
         void convertBuffer(char *, char *, RtApi::ConvertInfo &);
         void byteSwapBuffer(char *, unsigned int, RtAudioFormat);
         unsigned int formatBytes(RtAudioFormat);
         void setConvertInfo(RtApi::StreamMode, unsigned int);

         typedef short Int16;
         typedef int Int32;
         typedef float Float32;
         typedef double Float64;
     } * const this; computed at runtime
    block #013, object at 0x18753a0 under 0x18854b0, 1 syms/buckets in 0x402e4e..0x402e91, function RtAudio::getDeviceCount()
     class RtAudio {
       protected:
         RtApi *rtapi_;

       public:
         static void getCompiledApi(std::vector<RtAudio::Api, std::allocator<RtAudio::Api> > &);
         RtAudio(RtAudio::Api);
         ~RtAudio();
         RtAudio::Api getCurrentApi(void);
         unsigned int getDeviceCount(void);
         RtAudio::DeviceInfo getDeviceInfo(unsigned int);
         unsigned int getDefaultOutputDevice(void);
         unsigned int getDefaultInputDevice(void);
         void openStream(RtAudio::StreamParameters *, RtAudio::StreamParameters *, RtAudioFormat, unsigned int, unsigned int *, RtAudioCallback, void *, RtAudio::StreamOptions *);
         void closeStream(void);
         void startStream(void);
         void stopStream(void);
         void abortStream(void);
         bool isStreamOpen(void) const;
         bool isStreamRunning(void) const;
         double getStreamTime(void);
         long getStreamLatency(void);
         unsigned int getStreamSampleRate(void);
         void showWarnings(bool);
       protected:
         void openRtApi(RtAudio::Api);
     } * const this; computed at runtime
    block #014, object at 0x18755d0 under 0x18854b0, 1 syms/buckets in 0x402e92..0x402ed5, function RtAudio::getDefaultOutputDevice()
     class RtAudio {
       protected:
         RtApi *rtapi_;

       public:
         static void getCompiledApi(std::vector<RtAudio::Api, std::allocator<RtAudio::Api> > &);
         RtAudio(RtAudio::Api);
         ~RtAudio();
         RtAudio::Api getCurrentApi(void);
         unsigned int getDeviceCount(void);
         RtAudio::DeviceInfo getDeviceInfo(unsigned int);
         unsigned int getDefaultOutputDevice(void);
         unsigned int getDefaultInputDevice(void);
         void openStream(RtAudio::StreamParameters *, RtAudio::StreamParameters *, RtAudioFormat, unsigned int, unsigned int *, RtAudioCallback, void *, RtAudio::StreamOptions *);
         void closeStream(void);
         void startStream(void);
         void stopStream(void);
         void abortStream(void);
         bool isStreamOpen(void) const;
         bool isStreamRunning(void) const;
         double getStreamTime(void);
         long getStreamLatency(void);
         unsigned int getStreamSampleRate(void);
         void showWarnings(bool);
       protected:
         void openRtApi(RtAudio::Api);
     } * const this; computed at runtime
    block #015, object at 0x1875800 under 0x18854b0, 1 syms/buckets in 0x402ed6..0x402f19, function RtAudio::closeStream()
     class RtAudio {
       protected:
         RtApi *rtapi_;

       public:
         static void getCompiledApi(std::vector<RtAudio::Api, std::allocator<RtAudio::Api> > &);
         RtAudio(RtAudio::Api);
         ~RtAudio();
         RtAudio::Api getCurrentApi(void);
         unsigned int getDeviceCount(void);
         RtAudio::DeviceInfo getDeviceInfo(unsigned int);
         unsigned int getDefaultOutputDevice(void);
         unsigned int getDefaultInputDevice(void);
         void openStream(RtAudio::StreamParameters *, RtAudio::StreamParameters *, RtAudioFormat, unsigned int, unsigned int *, RtAudioCallback, void *, RtAudio::StreamOptions *);
         void closeStream(void);
         void startStream(void);
         void stopStream(void);
         void abortStream(void);
         bool isStreamOpen(void) const;
         bool isStreamRunning(void) const;
         double getStreamTime(void);
         long getStreamLatency(void);
         unsigned int getStreamSampleRate(void);
         void showWarnings(bool);
       protected:
         void openRtApi(RtAudio::Api);
     } * const this; computed at runtime
    block #016, object at 0x1875a30 under 0x18854b0, 1 syms/buckets in 0x402f1a..0x402f45, function RtAudio::startStream()
     class RtAudio {
       protected:
         RtApi *rtapi_;

       public:
         static void getCompiledApi(std::vector<RtAudio::Api, std::allocator<RtAudio::Api> > &);
         RtAudio(RtAudio::Api);
         ~RtAudio();
         RtAudio::Api getCurrentApi(void);
         unsigned int getDeviceCount(void);
         RtAudio::DeviceInfo getDeviceInfo(unsigned int);
         unsigned int getDefaultOutputDevice(void);
         unsigned int getDefaultInputDevice(void);
         void openStream(RtAudio::StreamParameters *, RtAudio::StreamParameters *, RtAudioFormat, unsigned int, unsigned int *, RtAudioCallback, void *, RtAudio::StreamOptions *);
         void closeStream(void);
         void startStream(void);
         void stopStream(void);
         void abortStream(void);
         bool isStreamOpen(void) const;
         bool isStreamRunning(void) const;
         double getStreamTime(void);
         long getStreamLatency(void);
         unsigned int getStreamSampleRate(void);
         void showWarnings(bool);
       protected:
         void openRtApi(RtAudio::Api);
     } * const this; computed at runtime
    block #017, object at 0x1875c60 under 0x18854b0, 1 syms/buckets in 0x402f46..0x402f71, function RtAudio::stopStream()
     class RtAudio {
       protected:
         RtApi *rtapi_;

       public:
         static void getCompiledApi(std::vector<RtAudio::Api, std::allocator<RtAudio::Api> > &);
         RtAudio(RtAudio::Api);
         ~RtAudio();
         RtAudio::Api getCurrentApi(void);
         unsigned int getDeviceCount(void);
         RtAudio::DeviceInfo getDeviceInfo(unsigned int);
         unsigned int getDefaultOutputDevice(void);
         unsigned int getDefaultInputDevice(void);
         void openStream(RtAudio::StreamParameters *, RtAudio::StreamParameters *, RtAudioFormat, unsigned int, unsigned int *, RtAudioCallback, void *, RtAudio::StreamOptions *);
         void closeStream(void);
         void startStream(void);
         void stopStream(void);
         void abortStream(void);
         bool isStreamOpen(void) const;
         bool isStreamRunning(void) const;
         double getStreamTime(void);
         long getStreamLatency(void);
         unsigned int getStreamSampleRate(void);
         void showWarnings(bool);
       protected:
         void openRtApi(RtAudio::Api);
     } * const this; computed at runtime
    block #018, object at 0x1877eb0 under 0x18854b0, 1 syms/buckets in 0x402f72..0x402f8f, function RtAudio::isStreamOpen() const
     const class RtAudio {
       protected:
         RtApi *rtapi_;

       public:
         static void getCompiledApi(std::vector<RtAudio::Api, std::allocator<RtAudio::Api> > &);
         RtAudio(RtAudio::Api);
         ~RtAudio();
         RtAudio::Api getCurrentApi(void);
         unsigned int getDeviceCount(void);
         RtAudio::DeviceInfo getDeviceInfo(unsigned int);
         unsigned int getDefaultOutputDevice(void);
         unsigned int getDefaultInputDevice(void);
         void openStream(RtAudio::StreamParameters *, RtAudio::StreamParameters *, RtAudioFormat, unsigned int, unsigned int *, RtAudioCallback, void *, RtAudio::StreamOptions *);
         void closeStream(void);
         void startStream(void);
         void stopStream(void);
         void abortStream(void);
         bool isStreamOpen(void) const;
         bool isStreamRunning(void) const;
         double getStreamTime(void);
         long getStreamLatency(void);
         unsigned int getStreamSampleRate(void);
         void showWarnings(bool);
       protected:
         void openRtApi(RtAudio::Api);
     } * const this; computed at runtime
    block #019, object at 0x1879120 under 0x18854b0, 1 syms/buckets in 0x402f90..0x402faa, function std::allocator<double>::allocator()
     class std::allocator<double> : public __gnu_cxx::new_allocator<double> {
       public:
         allocator(void);
         allocator(const std::allocator<double> &);
         ~allocator();

         typedef std::size_t size_type;
         typedef double *pointer;
         typedef const double *const_pointer;
         typedef double &reference;
         typedef const double &const_reference;
     } * const this; computed at runtime
    block #020, object at 0x18793a0 under 0x18854b0, 2 syms/buckets in 0x402faa..0x402fc4, function std::allocator<double>::~allocator()
     class std::allocator<double> : public __gnu_cxx::new_allocator<double> {
       public:
         allocator(void);
         allocator(const std::allocator<double> &);
         ~allocator();

         typedef std::size_t size_type;
         typedef double *pointer;
         typedef const double *const_pointer;
         typedef double &reference;
         typedef const double &const_reference;
     } * const this; computed at runtime
     const int __in_chrg; optimized out
    block #021, object at 0x18798a0 under 0x18854b0, 4 syms/buckets in 0x402fc4..0x403028, function std::vector<double, std::allocator<double> >::vector<int>(int, int, std::allocator<double> const&)
     class std::vector<double, std::allocator<double> > : protected std::_Vector_base<double, std::allocator<double> > {
       public:
         vector(void);
         vector(const std::vector<double, std::allocator<double> >::allocator_type &);
         vector(std::vector<double, std::allocator<double> >::size_type, const std::vector<double, std::allocator<double> >::value_type &, const std::vector<double, std::allocator<double> >::allocator_type &);
         vector(const std::vector<double, std::allocator<double> > &);
         ~vector();
         std::vector<double, std::allocator<double> > & operator=(const std::vector<double, std::allocator<double> > &);
         void assign(std::vector<double, std::allocator<double> >::size_type, const std::vector<double, std::allocator<double> >::value_type &);
         std::vector<double, std::allocator<double> >::iterator begin(void);
         std::vector<double, std::allocator<double> >::const_iterator begin(void) const;
         std::vector<double, std::allocator<double> >::iterator end(void);
         std::vector<double, std::allocator<double> >::const_iterator end(void) const;
         std::vector<double, std::allocator<double> >::reverse_iterator rbegin(void);
         std::vector<double, std::allocator<double> >::const_reverse_iterator rbegin(void) const;
         std::vector<double, std::allocator<double> >::reverse_iterator rend(void);
         std::vector<double, std::allocator<double> >::const_reverse_iterator rend(void) const;
         std::vector<double, std::allocator<double> >::size_type size(void) const;
         std::vector<double, std::allocator<double> >::size_type max_size(void) const;
         void resize(std::vector<double, std::allocator<double> >::size_type, std::vector<double, std::allocator<double> >::value_type);
         std::vector<double, std::allocator<double> >::size_type capacity(void) const;
         bool empty(void) const;
         void reserve(std::vector<double, std::allocator<double> >::size_type);
         std::vector<double, std::allocator<double> >::reference operator[](std::vector<double, std::allocator<double> >::size_type);
         std::vector<double, std::allocator<double> >::const_reference operator[](std::vector<double, std::allocator<double> >::size_type) const;
       protected:
         void _M_range_check(std::vector<double, std::allocator<double> >::size_type) const;
       public:
         std::vector<double, std::allocator<double> >::reference at(std::vector<double, std::allocator<double> >::size_type);
         std::vector<double, std::allocator<double> >::const_reference at(std::vector<double, std::allocator<double> >::size_type) const;
         std::vector<double, std::allocator<double> >::reference front(void);
         std::vector<double, std::allocator<double> >::const_reference front(void) const;
         std::vector<double, std::allocator<double> >::reference back(void);
         std::vector<double, std::allocator<double> >::const_reference back(void) const;
         std::vector<double, std::allocator<double> >::pointer data(void);
         std::vector<double, std::allocator<double> >::const_pointer data(void) const;
         void push_back(const std::vector<double, std::allocator<double> >::value_type &);
         void pop_back(void);
         std::vector<double, std::allocator<double> >::iterator insert(std::vector<double, std::allocator<double> >::iterator, const std::vector<double, std::allocator<double> >::value_type &);
         void insert(std::vector<double, std::allocator<double> >::iterator, std::vector<double, std::allocator<double> >::size_type, const std::vector<double, std::allocator<double> >::value_type &);
         std::vector<double, std::allocator<double> >::iterator erase(std::vector<double, std::allocator<double> >::iterator);
         std::vector<double, std::allocator<double> >::iterator erase(std::vector<double, std::allocator<double> >::iterator, std::vector<double, std::allocator<double> >::iterator);
         void swap(std::vector<double, std::allocator<double> > &);
         void clear(void);
       protected:
         void _M_fill_initialize(std::vector<double, std::allocator<double> >::size_type, const std::vector<double, std::allocator<double> >::value_type &);
         void _M_fill_assign(std::size_t, const std::vector<double, std::allocator<double> >::value_type &);
         void _M_fill_insert(std::vector<double, std::allocator<double> >::iterator, std::vector<double, std::allocator<double> >::size_type, const std::vector<double, std::allocator<double> >::value_type &);
         void _M_insert_aux(std::vector<double, std::allocator<double> >::iterator, const double &);
         std::vector<double, std::allocator<double> >::size_type _M_check_len(std::vector<double, std::allocator<double> >::size_type, const char *) const;
         void _M_erase_at_end(std::vector<double, std::allocator<double> >::pointer);
       public:
         void vector<int>(int, int, const std::vector<double, std::allocator<double> >::allocator_type &);
       protected:
         void _M_initialize_dispatch<int>(int, int, std::__true_type);

       public:
         typedef double value_type;
         typedef std::_Vector_base<double, std::allocator<double> >::pointer pointer;
         typedef __gnu_cxx::__alloc_traits<std::allocator<double> >::const_pointer const_pointer;
         typedef __gnu_cxx::__alloc_traits<std::allocator<double> >::reference reference;
         typedef __gnu_cxx::__alloc_traits<std::allocator<double> >::const_reference const_reference;
         typedef __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > iterator;
         typedef __gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > > const_iterator;
         typedef std::reverse_iterator<__gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > > > const_reverse_iterator;
         typedef std::reverse_iterator<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > > reverse_iterator;
         typedef std::size_t size_type;
         typedef std::allocator<double> allocator_type;
     } * const this; computed at runtime
     int __first; computed at runtime
     int __last; computed at runtime
     const class std::allocator<double> : public __gnu_cxx::new_allocator<double> {
       public:
         allocator(void);
         allocator(const std::allocator<double> &);
         ~allocator();

         typedef std::size_t size_type;
         typedef double *pointer;
         typedef const double *const_pointer;
         typedef double &reference;
         typedef const double &const_reference;
     } &__a; computed at runtime
    block #022, object at 0x187ee20 under 0x18854b0, 2 syms/buckets in 0x403028..0x40308d, function std::vector<double, std::allocator<double> >::~vector()
     class std::vector<double, std::allocator<double> > : protected std::_Vector_base<double, std::allocator<double> > {
       public:
         vector(void);
         vector(const std::vector<double, std::allocator<double> >::allocator_type &);
         vector(std::vector<double, std::allocator<double> >::size_type, const std::vector<double, std::allocator<double> >::value_type &, const std::vector<double, std::allocator<double> >::allocator_type &);
         vector(const std::vector<double, std::allocator<double> > &);
         ~vector();
         std::vector<double, std::allocator<double> > & operator=(const std::vector<double, std::allocator<double> > &);
         void assign(std::vector<double, std::allocator<double> >::size_type, const std::vector<double, std::allocator<double> >::value_type &);
         std::vector<double, std::allocator<double> >::iterator begin(void);
         std::vector<double, std::allocator<double> >::const_iterator begin(void) const;
         std::vector<double, std::allocator<double> >::iterator end(void);
         std::vector<double, std::allocator<double> >::const_iterator end(void) const;
         std::vector<double, std::allocator<double> >::reverse_iterator rbegin(void);
         std::vector<double, std::allocator<double> >::const_reverse_iterator rbegin(void) const;
         std::vector<double, std::allocator<double> >::reverse_iterator rend(void);
         std::vector<double, std::allocator<double> >::const_reverse_iterator rend(void) const;
         std::vector<double, std::allocator<double> >::size_type size(void) const;
         std::vector<double, std::allocator<double> >::size_type max_size(void) const;
         void resize(std::vector<double, std::allocator<double> >::size_type, std::vector<double, std::allocator<double> >::value_type);
         std::vector<double, std::allocator<double> >::size_type capacity(void) const;
         bool empty(void) const;
         void reserve(std::vector<double, std::allocator<double> >::size_type);
         std::vector<double, std::allocator<double> >::reference operator[](std::vector<double, std::allocator<double> >::size_type);
         std::vector<double, std::allocator<double> >::const_reference operator[](std::vector<double, std::allocator<double> >::size_type) const;
       protected:
         void _M_range_check(std::vector<double, std::allocator<double> >::size_type) const;
       public:
         std::vector<double, std::allocator<double> >::reference at(std::vector<double, std::allocator<double> >::size_type);
         std::vector<double, std::allocator<double> >::const_reference at(std::vector<double, std::allocator<double> >::size_type) const;
         std::vector<double, std::allocator<double> >::reference front(void);
         std::vector<double, std::allocator<double> >::const_reference front(void) const;
         std::vector<double, std::allocator<double> >::reference back(void);
         std::vector<double, std::allocator<double> >::const_reference back(void) const;
         std::vector<double, std::allocator<double> >::pointer data(void);
         std::vector<double, std::allocator<double> >::const_pointer data(void) const;
         void push_back(const std::vector<double, std::allocator<double> >::value_type &);
         void pop_back(void);
         std::vector<double, std::allocator<double> >::iterator insert(std::vector<double, std::allocator<double> >::iterator, const std::vector<double, std::allocator<double> >::value_type &);
         void insert(std::vector<double, std::allocator<double> >::iterator, std::vector<double, std::allocator<double> >::size_type, const std::vector<double, std::allocator<double> >::value_type &);
         std::vector<double, std::allocator<double> >::iterator erase(std::vector<double, std::allocator<double> >::iterator);
         std::vector<double, std::allocator<double> >::iterator erase(std::vector<double, std::allocator<double> >::iterator, std::vector<double, std::allocator<double> >::iterator);
         void swap(std::vector<double, std::allocator<double> > &);
         void clear(void);
       protected:
         void _M_fill_initialize(std::vector<double, std::allocator<double> >::size_type, const std::vector<double, std::allocator<double> >::value_type &);
         void _M_fill_assign(std::size_t, const std::vector<double, std::allocator<double> >::value_type &);
         void _M_fill_insert(std::vector<double, std::allocator<double> >::iterator, std::vector<double, std::allocator<double> >::size_type, const std::vector<double, std::allocator<double> >::value_type &);
         void _M_insert_aux(std::vector<double, std::allocator<double> >::iterator, const double &);
         std::vector<double, std::allocator<double> >::size_type _M_check_len(std::vector<double, std::allocator<double> >::size_type, const char *) const;
         void _M_erase_at_end(std::vector<double, std::allocator<double> >::pointer);
       public:
         void vector<int>(int, int, const std::vector<double, std::allocator<double> >::allocator_type &);
       protected:
         void _M_initialize_dispatch<int>(int, int, std::__true_type);

       public:
         typedef double value_type;
         typedef std::_Vector_base<double, std::allocator<double> >::pointer pointer;
         typedef __gnu_cxx::__alloc_traits<std::allocator<double> >::const_pointer const_pointer;
         typedef __gnu_cxx::__alloc_traits<std::allocator<double> >::reference reference;
         typedef __gnu_cxx::__alloc_traits<std::allocator<double> >::const_reference const_reference;
         typedef __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > iterator;
         typedef __gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > > const_iterator;
         typedef std::reverse_iterator<__gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > > > const_reverse_iterator;
         typedef std::reverse_iterator<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > > reverse_iterator;
         typedef std::size_t size_type;
         typedef std::allocator<double> allocator_type;
     } * const this; computed at runtime
     const int __in_chrg; optimized out
    block #023, object at 0x187f0e0 under 0x18854b0, 2 syms/buckets in 0x40308e..0x4030ae, function std::vector<double, std::allocator<double> >::operator[](unsigned long)
     class std::vector<double, std::allocator<double> > : protected std::_Vector_base<double, std::allocator<double> > {
       public:
         vector(void);
         vector(const std::vector<double, std::allocator<double> >::allocator_type &);
         vector(std::vector<double, std::allocator<double> >::size_type, const std::vector<double, std::allocator<double> >::value_type &, const std::vector<double, std::allocator<double> >::allocator_type &);
         vector(const std::vector<double, std::allocator<double> > &);
         ~vector();
         std::vector<double, std::allocator<double> > & operator=(const std::vector<double, std::allocator<double> > &);
         void assign(std::vector<double, std::allocator<double> >::size_type, const std::vector<double, std::allocator<double> >::value_type &);
         std::vector<double, std::allocator<double> >::iterator begin(void);
         std::vector<double, std::allocator<double> >::const_iterator begin(void) const;
         std::vector<double, std::allocator<double> >::iterator end(void);
         std::vector<double, std::allocator<double> >::const_iterator end(void) const;
         std::vector<double, std::allocator<double> >::reverse_iterator rbegin(void);
         std::vector<double, std::allocator<double> >::const_reverse_iterator rbegin(void) const;
         std::vector<double, std::allocator<double> >::reverse_iterator rend(void);
         std::vector<double, std::allocator<double> >::const_reverse_iterator rend(void) const;
         std::vector<double, std::allocator<double> >::size_type size(void) const;
         std::vector<double, std::allocator<double> >::size_type max_size(void) const;
         void resize(std::vector<double, std::allocator<double> >::size_type, std::vector<double, std::allocator<double> >::value_type);
         std::vector<double, std::allocator<double> >::size_type capacity(void) const;
         bool empty(void) const;
         void reserve(std::vector<double, std::allocator<double> >::size_type);
         std::vector<double, std::allocator<double> >::reference operator[](std::vector<double, std::allocator<double> >::size_type);
         std::vector<double, std::allocator<double> >::const_reference operator[](std::vector<double, std::allocator<double> >::size_type) const;
       protected:
         void _M_range_check(std::vector<double, std::allocator<double> >::size_type) const;
       public:
         std::vector<double, std::allocator<double> >::reference at(std::vector<double, std::allocator<double> >::size_type);
         std::vector<double, std::allocator<double> >::const_reference at(std::vector<double, std::allocator<double> >::size_type) const;
         std::vector<double, std::allocator<double> >::reference front(void);
         std::vector<double, std::allocator<double> >::const_reference front(void) const;
         std::vector<double, std::allocator<double> >::reference back(void);
         std::vector<double, std::allocator<double> >::const_reference back(void) const;
         std::vector<double, std::allocator<double> >::pointer data(void);
         std::vector<double, std::allocator<double> >::const_pointer data(void) const;
         void push_back(const std::vector<double, std::allocator<double> >::value_type &);
         void pop_back(void);
         std::vector<double, std::allocator<double> >::iterator insert(std::vector<double, std::allocator<double> >::iterator, const std::vector<double, std::allocator<double> >::value_type &);
         void insert(std::vector<double, std::allocator<double> >::iterator, std::vector<double, std::allocator<double> >::size_type, const std::vector<double, std::allocator<double> >::value_type &);
         std::vector<double, std::allocator<double> >::iterator erase(std::vector<double, std::allocator<double> >::iterator);
         std::vector<double, std::allocator<double> >::iterator erase(std::vector<double, std::allocator<double> >::iterator, std::vector<double, std::allocator<double> >::iterator);
         void swap(std::vector<double, std::allocator<double> > &);
         void clear(void);
       protected:
         void _M_fill_initialize(std::vector<double, std::allocator<double> >::size_type, const std::vector<double, std::allocator<double> >::value_type &);
         void _M_fill_assign(std::size_t, const std::vector<double, std::allocator<double> >::value_type &);
         void _M_fill_insert(std::vector<double, std::allocator<double> >::iterator, std::vector<double, std::allocator<double> >::size_type, const std::vector<double, std::allocator<double> >::value_type &);
         void _M_insert_aux(std::vector<double, std::allocator<double> >::iterator, const double &);
         std::vector<double, std::allocator<double> >::size_type _M_check_len(std::vector<double, std::allocator<double> >::size_type, const char *) const;
         void _M_erase_at_end(std::vector<double, std::allocator<double> >::pointer);
       public:
         void vector<int>(int, int, const std::vector<double, std::allocator<double> >::allocator_type &);
       protected:
         void _M_initialize_dispatch<int>(int, int, std::__true_type);

       public:
         typedef double value_type;
         typedef std::_Vector_base<double, std::allocator<double> >::pointer pointer;
         typedef __gnu_cxx::__alloc_traits<std::allocator<double> >::const_pointer const_pointer;
         typedef __gnu_cxx::__alloc_traits<std::allocator<double> >::reference reference;
         typedef __gnu_cxx::__alloc_traits<std::allocator<double> >::const_reference const_reference;
         typedef __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > iterator;
         typedef __gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > > const_iterator;
         typedef std::reverse_iterator<__gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > > > const_reverse_iterator;
         typedef std::reverse_iterator<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > > reverse_iterator;
         typedef std::size_t size_type;
         typedef std::allocator<double> allocator_type;
     } * const this; computed at runtime
     unsigned long __n; computed at runtime
    block #024, object at 0x187f330 under 0x18854b0, 1 syms/buckets in 0x4030ae..0x4030b8, function __gnu_cxx::new_allocator<double>::new_allocator()
     class __gnu_cxx::new_allocator<double> {
       public:
         new_allocator(void);
         new_allocator(const __gnu_cxx::new_allocator<double> &);
         ~new_allocator();
         __gnu_cxx::new_allocator<double>::pointer address(__gnu_cxx::new_allocator<double>::reference) const;
         __gnu_cxx::new_allocator<double>::const_pointer address(__gnu_cxx::new_allocator<double>::const_reference) const;
         __gnu_cxx::new_allocator<double>::pointer allocate(__gnu_cxx::new_allocator<double>::size_type, const void *);
         void deallocate(__gnu_cxx::new_allocator<double>::pointer, __gnu_cxx::new_allocator<double>::size_type);
         __gnu_cxx::new_allocator<double>::size_type max_size(void) const;
         void construct(__gnu_cxx::new_allocator<double>::pointer, const double &);
         void destroy(__gnu_cxx::new_allocator<double>::pointer);

         typedef std::size_t size_type;
         typedef double *pointer;
         typedef const double *const_pointer;
         typedef double &reference;
         typedef const double &const_reference;
     } * const this; computed at runtime
    block #025, object at 0x187f5b0 under 0x18854b0, 2 syms/buckets in 0x4030b8..0x4030c2, function __gnu_cxx::new_allocator<double>::~new_allocator()
     class __gnu_cxx::new_allocator<double> {
       public:
         new_allocator(void);
         new_allocator(const __gnu_cxx::new_allocator<double> &);
         ~new_allocator();
         __gnu_cxx::new_allocator<double>::pointer address(__gnu_cxx::new_allocator<double>::reference) const;
         __gnu_cxx::new_allocator<double>::const_pointer address(__gnu_cxx::new_allocator<double>::const_reference) const;
         __gnu_cxx::new_allocator<double>::pointer allocate(__gnu_cxx::new_allocator<double>::size_type, const void *);
         void deallocate(__gnu_cxx::new_allocator<double>::pointer, __gnu_cxx::new_allocator<double>::size_type);
         __gnu_cxx::new_allocator<double>::size_type max_size(void) const;
         void construct(__gnu_cxx::new_allocator<double>::pointer, const double &);
         void destroy(__gnu_cxx::new_allocator<double>::pointer);

         typedef std::size_t size_type;
         typedef double *pointer;
         typedef const double *const_pointer;
         typedef double &reference;
         typedef const double &const_reference;
     } * const this; computed at runtime
     const int __in_chrg; optimized out
    block #026, object at 0x187f850 under 0x18854b0, 2 syms/buckets in 0x4030c2..0x4030dc, function std::_Vector_base<double, std::allocator<double> >::_Vector_impl::~_Vector_impl()
     struct std::_Vector_base<double, std::allocator<double> >::_Vector_impl : public std::allocator<double> {
         std::_Vector_base<double, std::allocator<double> >::pointer _M_start;
         std::_Vector_base<double, std::allocator<double> >::pointer _M_finish;
         std::_Vector_base<double, std::allocator<double> >::pointer _M_end_of_storage;
       public:
         _Vector_impl(void);
         _Vector_impl(const std::_Vector_base<double, std::allocator<double> >::_Tp_alloc_type &);
         void _M_swap_data(std::_Vector_base<double, std::allocator<double> >::_Vector_impl &);
     } * const this; computed at runtime
     const int __in_chrg; optimized out
    block #027, object at 0x187fb80 under 0x18854b0, 2 syms/buckets in 0x4030dc..0x403101, function std::_Vector_base<double, std::allocator<double> >::_Vector_base(std::allocator<double> const&)
     struct std::_Vector_base<double, std::allocator<double> > {
       public:
         std::_Vector_base<double, std::allocator<double> >::_Vector_impl _M_impl;

         std::_Vector_base<double, std::allocator<double> >::_Tp_alloc_type & _M_get_Tp_allocator(void);
         const std::_Vector_base<double, std::allocator<double> >::_Tp_alloc_type & _M_get_Tp_allocator(void) const;
         std::_Vector_base<double, std::allocator<double> >::allocator_type get_allocator(void) const;
         _Vector_base(void);
         _Vector_base(const std::_Vector_base<double, std::allocator<double> >::allocator_type &);
         _Vector_base(std::size_t);
         _Vector_base(std::size_t, const std::_Vector_base<double, std::allocator<double> >::allocator_type &);
         ~_Vector_base();
         std::_Vector_base<double, std::allocator<double> >::pointer _M_allocate(std::size_t);
         void _M_deallocate(std::_Vector_base<double, std::allocator<double> >::pointer, std::size_t);
       private:
         void _M_create_storage(std::size_t);

       public:
         typedef __gnu_cxx::__alloc_traits<std::allocator<double> >::pointer pointer;
         typedef __gnu_cxx::__alloc_traits<std::allocator<double> >::rebind<double>::other _Tp_alloc_type;
         typedef std::allocator<double> allocator_type;
     } * const this; computed at runtime
     const class std::allocator<double> : public __gnu_cxx::new_allocator<double> {
       public:
         allocator(void);
         allocator(const std::allocator<double> &);
         ~allocator();

         typedef std::size_t size_type;
         typedef double *pointer;
         typedef const double *const_pointer;
         typedef double &reference;
         typedef const double &const_reference;
     } &__a; computed at runtime
    block #028, object at 0x187fe30 under 0x18854b0, 2 syms/buckets in 0x403102..0x403173, function std::_Vector_base<double, std::allocator<double> >::~_Vector_base()
     struct std::_Vector_base<double, std::allocator<double> > {
       public:
         std::_Vector_base<double, std::allocator<double> >::_Vector_impl _M_impl;

         std::_Vector_base<double, std::allocator<double> >::_Tp_alloc_type & _M_get_Tp_allocator(void);
         const std::_Vector_base<double, std::allocator<double> >::_Tp_alloc_type & _M_get_Tp_allocator(void) const;
         std::_Vector_base<double, std::allocator<double> >::allocator_type get_allocator(void) const;
         _Vector_base(void);
         _Vector_base(const std::_Vector_base<double, std::allocator<double> >::allocator_type &);
         _Vector_base(std::size_t);
         _Vector_base(std::size_t, const std::_Vector_base<double, std::allocator<double> >::allocator_type &);
         ~_Vector_base();
         std::_Vector_base<double, std::allocator<double> >::pointer _M_allocate(std::size_t);
         void _M_deallocate(std::_Vector_base<double, std::allocator<double> >::pointer, std::size_t);
       private:
         void _M_create_storage(std::size_t);

       public:
         typedef __gnu_cxx::__alloc_traits<std::allocator<double> >::pointer pointer;
         typedef __gnu_cxx::__alloc_traits<std::allocator<double> >::rebind<double>::other _Tp_alloc_type;
         typedef std::allocator<double> allocator_type;
     } * const this; computed at runtime
     const int __in_chrg; optimized out
    block #029, object at 0x1880200 under 0x18854b0, 3 syms/buckets in 0x403174..0x4031e3, function std::vector<double, std::allocator<double> >::_M_initialize_dispatch<int>(int, int, std::__true_type)
     class std::vector<double, std::allocator<double> > : protected std::_Vector_base<double, std::allocator<double> > {
       public:
         vector(void);
         vector(const std::vector<double, std::allocator<double> >::allocator_type &);
         vector(std::vector<double, std::allocator<double> >::size_type, const std::vector<double, std::allocator<double> >::value_type &, const std::vector<double, std::allocator<double> >::allocator_type &);
         vector(const std::vector<double, std::allocator<double> > &);
         ~vector();
         std::vector<double, std::allocator<double> > & operator=(const std::vector<double, std::allocator<double> > &);
         void assign(std::vector<double, std::allocator<double> >::size_type, const std::vector<double, std::allocator<double> >::value_type &);
         std::vector<double, std::allocator<double> >::iterator begin(void);
         std::vector<double, std::allocator<double> >::const_iterator begin(void) const;
         std::vector<double, std::allocator<double> >::iterator end(void);
         std::vector<double, std::allocator<double> >::const_iterator end(void) const;
         std::vector<double, std::allocator<double> >::reverse_iterator rbegin(void);
         std::vector<double, std::allocator<double> >::const_reverse_iterator rbegin(void) const;
         std::vector<double, std::allocator<double> >::reverse_iterator rend(void);
         std::vector<double, std::allocator<double> >::const_reverse_iterator rend(void) const;
         std::vector<double, std::allocator<double> >::size_type size(void) const;
         std::vector<double, std::allocator<double> >::size_type max_size(void) const;
         void resize(std::vector<double, std::allocator<double> >::size_type, std::vector<double, std::allocator<double> >::value_type);
         std::vector<double, std::allocator<double> >::size_type capacity(void) const;
         bool empty(void) const;
         void reserve(std::vector<double, std::allocator<double> >::size_type);
         std::vector<double, std::allocator<double> >::reference operator[](std::vector<double, std::allocator<double> >::size_type);
         std::vector<double, std::allocator<double> >::const_reference operator[](std::vector<double, std::allocator<double> >::size_type) const;
       protected:
         void _M_range_check(std::vector<double, std::allocator<double> >::size_type) const;
       public:
         std::vector<double, std::allocator<double> >::reference at(std::vector<double, std::allocator<double> >::size_type);
         std::vector<double, std::allocator<double> >::const_reference at(std::vector<double, std::allocator<double> >::size_type) const;
         std::vector<double, std::allocator<double> >::reference front(void);
         std::vector<double, std::allocator<double> >::const_reference front(void) const;
         std::vector<double, std::allocator<double> >::reference back(void);
         std::vector<double, std::allocator<double> >::const_reference back(void) const;
         std::vector<double, std::allocator<double> >::pointer data(void);
         std::vector<double, std::allocator<double> >::const_pointer data(void) const;
         void push_back(const std::vector<double, std::allocator<double> >::value_type &);
         void pop_back(void);
         std::vector<double, std::allocator<double> >::iterator insert(std::vector<double, std::allocator<double> >::iterator, const std::vector<double, std::allocator<double> >::value_type &);
         void insert(std::vector<double, std::allocator<double> >::iterator, std::vector<double, std::allocator<double> >::size_type, const std::vector<double, std::allocator<double> >::value_type &);
         std::vector<double, std::allocator<double> >::iterator erase(std::vector<double, std::allocator<double> >::iterator);
         std::vector<double, std::allocator<double> >::iterator erase(std::vector<double, std::allocator<double> >::iterator, std::vector<double, std::allocator<double> >::iterator);
         void swap(std::vector<double, std::allocator<double> > &);
         void clear(void);
       protected:
         void _M_fill_initialize(std::vector<double, std::allocator<double> >::size_type, const std::vector<double, std::allocator<double> >::value_type &);
         void _M_fill_assign(std::size_t, const std::vector<double, std::allocator<double> >::value_type &);
         void _M_fill_insert(std::vector<double, std::allocator<double> >::iterator, std::vector<double, std::allocator<double> >::size_type, const std::vector<double, std::allocator<double> >::value_type &);
         void _M_insert_aux(std::vector<double, std::allocator<double> >::iterator, const double &);
         std::vector<double, std::allocator<double> >::size_type _M_check_len(std::vector<double, std::allocator<double> >::size_type, const char *) const;
         void _M_erase_at_end(std::vector<double, std::allocator<double> >::pointer);
       public:
         void vector<int>(int, int, const std::vector<double, std::allocator<double> >::allocator_type &);
       protected:
         void _M_initialize_dispatch<int>(int, int, std::__true_type);

       public:
         typedef double value_type;
         typedef std::_Vector_base<double, std::allocator<double> >::pointer pointer;
         typedef __gnu_cxx::__alloc_traits<std::allocator<double> >::const_pointer const_pointer;
         typedef __gnu_cxx::__alloc_traits<std::allocator<double> >::reference reference;
         typedef __gnu_cxx::__alloc_traits<std::allocator<double> >::const_reference const_reference;
         typedef __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > iterator;
         typedef __gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > > const_iterator;
         typedef std::reverse_iterator<__gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > > > const_reverse_iterator;
         typedef std::reverse_iterator<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > > reverse_iterator;
         typedef std::size_t size_type;
         typedef std::allocator<double> allocator_type;
     } * const this; computed at runtime
     int __n; computed at runtime
     int __value; computed at runtime
    block #030, object at 0x1880450 under 0x18854b0, 1 syms/buckets in 0x4031e4..0x4031f2, function std::_Vector_base<double, std::allocator<double> >::_M_get_Tp_allocator()
     struct std::_Vector_base<double, std::allocator<double> > {
       public:
         std::_Vector_base<double, std::allocator<double> >::_Vector_impl _M_impl;

         std::_Vector_base<double, std::allocator<double> >::_Tp_alloc_type & _M_get_Tp_allocator(void);
         const std::_Vector_base<double, std::allocator<double> >::_Tp_alloc_type & _M_get_Tp_allocator(void) const;
         std::_Vector_base<double, std::allocator<double> >::allocator_type get_allocator(void) const;
         _Vector_base(void);
         _Vector_base(const std::_Vector_base<double, std::allocator<double> >::allocator_type &);
         _Vector_base(std::size_t);
         _Vector_base(std::size_t, const std::_Vector_base<double, std::allocator<double> >::allocator_type &);
         ~_Vector_base();
         std::_Vector_base<double, std::allocator<double> >::pointer _M_allocate(std::size_t);
         void _M_deallocate(std::_Vector_base<double, std::allocator<double> >::pointer, std::size_t);
       private:
         void _M_create_storage(std::size_t);

       public:
         typedef __gnu_cxx::__alloc_traits<std::allocator<double> >::pointer pointer;
         typedef __gnu_cxx::__alloc_traits<std::allocator<double> >::rebind<double>::other _Tp_alloc_type;
         typedef std::allocator<double> allocator_type;
     } * const this; computed at runtime
    block #031, object at 0x1880830 under 0x18854b0, 2 syms/buckets in 0x4031f2..0x40321b, function std::_Destroy<double*, double>(double*, double*, std::allocator<double>&)
     double *__first; computed at runtime
     double *__last; computed at runtime
    block #032, object at 0x1880b50 under 0x18854b0, 2 syms/buckets in 0x40321c..0x403264, function std::_Vector_base<double, std::allocator<double> >::_Vector_impl::_Vector_impl(std::allocator<double> const&)
     struct std::_Vector_base<double, std::allocator<double> >::_Vector_impl : public std::allocator<double> {
         std::_Vector_base<double, std::allocator<double> >::pointer _M_start;
         std::_Vector_base<double, std::allocator<double> >::pointer _M_finish;
         std::_Vector_base<double, std::allocator<double> >::pointer _M_end_of_storage;
       public:
         _Vector_impl(void);
         _Vector_impl(const std::_Vector_base<double, std::allocator<double> >::_Tp_alloc_type &);
         void _M_swap_data(std::_Vector_base<double, std::allocator<double> >::_Vector_impl &);
     } * const this; computed at runtime
     const class std::allocator<double> : public __gnu_cxx::new_allocator<double> {
       public:
         allocator(void);
         allocator(const std::allocator<double> &);
         ~allocator();

         typedef std::size_t size_type;
         typedef double *pointer;
         typedef const double *const_pointer;
         typedef double &reference;
         typedef const double &const_reference;
     } &__a; computed at runtime
    block #033, object at 0x1880ef0 under 0x18854b0, 3 syms/buckets in 0x403264..0x403298, function std::_Vector_base<double, std::allocator<double> >::_M_deallocate(double*, unsigned long)
     struct std::_Vector_base<double, std::allocator<double> > {
       public:
         std::_Vector_base<double, std::allocator<double> >::_Vector_impl _M_impl;

         std::_Vector_base<double, std::allocator<double> >::_Tp_alloc_type & _M_get_Tp_allocator(void);
         const std::_Vector_base<double, std::allocator<double> >::_Tp_alloc_type & _M_get_Tp_allocator(void) const;
         std::_Vector_base<double, std::allocator<double> >::allocator_type get_allocator(void) const;
         _Vector_base(void);
         _Vector_base(const std::_Vector_base<double, std::allocator<double> >::allocator_type &);
         _Vector_base(std::size_t);
         _Vector_base(std::size_t, const std::_Vector_base<double, std::allocator<double> >::allocator_type &);
         ~_Vector_base();
         std::_Vector_base<double, std::allocator<double> >::pointer _M_allocate(std::size_t);
         void _M_deallocate(std::_Vector_base<double, std::allocator<double> >::pointer, std::size_t);
       private:
         void _M_create_storage(std::size_t);

       public:
         typedef __gnu_cxx::__alloc_traits<std::allocator<double> >::pointer pointer;
         typedef __gnu_cxx::__alloc_traits<std::allocator<double> >::rebind<double>::other _Tp_alloc_type;
         typedef std::allocator<double> allocator_type;
     } * const this; computed at runtime
     double *__p; computed at runtime
     unsigned long __n; computed at runtime
    block #034, object at 0x18811c0 under 0x18854b0, 2 syms/buckets in 0x403298..0x4032d0, function std::_Vector_base<double, std::allocator<double> >::_M_allocate(unsigned long)
     struct std::_Vector_base<double, std::allocator<double> > {
       public:
         std::_Vector_base<double, std::allocator<double> >::_Vector_impl _M_impl;

         std::_Vector_base<double, std::allocator<double> >::_Tp_alloc_type & _M_get_Tp_allocator(void);
         const std::_Vector_base<double, std::allocator<double> >::_Tp_alloc_type & _M_get_Tp_allocator(void) const;
         std::_Vector_base<double, std::allocator<double> >::allocator_type get_allocator(void) const;
         _Vector_base(void);
         _Vector_base(const std::_Vector_base<double, std::allocator<double> >::allocator_type &);
         _Vector_base(std::size_t);
         _Vector_base(std::size_t, const std::_Vector_base<double, std::allocator<double> >::allocator_type &);
         ~_Vector_base();
         std::_Vector_base<double, std::allocator<double> >::pointer _M_allocate(std::size_t);
         void _M_deallocate(std::_Vector_base<double, std::allocator<double> >::pointer, std::size_t);
       private:
         void _M_create_storage(std::size_t);

       public:
         typedef __gnu_cxx::__alloc_traits<std::allocator<double> >::pointer pointer;
         typedef __gnu_cxx::__alloc_traits<std::allocator<double> >::rebind<double>::other _Tp_alloc_type;
         typedef std::allocator<double> allocator_type;
     } * const this; computed at runtime
     unsigned long __n; computed at runtime
    block #035, object at 0x1881560 under 0x18854b0, 3 syms/buckets in 0x4032d0..0x40331c, function std::vector<double, std::allocator<double> >::_M_fill_initialize(unsigned long, double const&)
     class std::vector<double, std::allocator<double> > : protected std::_Vector_base<double, std::allocator<double> > {
       public:
         vector(void);
         vector(const std::vector<double, std::allocator<double> >::allocator_type &);
         vector(std::vector<double, std::allocator<double> >::size_type, const std::vector<double, std::allocator<double> >::value_type &, const std::vector<double, std::allocator<double> >::allocator_type &);
         vector(const std::vector<double, std::allocator<double> > &);
         ~vector();
         std::vector<double, std::allocator<double> > & operator=(const std::vector<double, std::allocator<double> > &);
         void assign(std::vector<double, std::allocator<double> >::size_type, const std::vector<double, std::allocator<double> >::value_type &);
         std::vector<double, std::allocator<double> >::iterator begin(void);
         std::vector<double, std::allocator<double> >::const_iterator begin(void) const;
         std::vector<double, std::allocator<double> >::iterator end(void);
         std::vector<double, std::allocator<double> >::const_iterator end(void) const;
         std::vector<double, std::allocator<double> >::reverse_iterator rbegin(void);
         std::vector<double, std::allocator<double> >::const_reverse_iterator rbegin(void) const;
         std::vector<double, std::allocator<double> >::reverse_iterator rend(void);
         std::vector<double, std::allocator<double> >::const_reverse_iterator rend(void) const;
         std::vector<double, std::allocator<double> >::size_type size(void) const;
         std::vector<double, std::allocator<double> >::size_type max_size(void) const;
         void resize(std::vector<double, std::allocator<double> >::size_type, std::vector<double, std::allocator<double> >::value_type);
         std::vector<double, std::allocator<double> >::size_type capacity(void) const;
         bool empty(void) const;
         void reserve(std::vector<double, std::allocator<double> >::size_type);
         std::vector<double, std::allocator<double> >::reference operator[](std::vector<double, std::allocator<double> >::size_type);
         std::vector<double, std::allocator<double> >::const_reference operator[](std::vector<double, std::allocator<double> >::size_type) const;
       protected:
         void _M_range_check(std::vector<double, std::allocator<double> >::size_type) const;
       public:
         std::vector<double, std::allocator<double> >::reference at(std::vector<double, std::allocator<double> >::size_type);
         std::vector<double, std::allocator<double> >::const_reference at(std::vector<double, std::allocator<double> >::size_type) const;
         std::vector<double, std::allocator<double> >::reference front(void);
         std::vector<double, std::allocator<double> >::const_reference front(void) const;
         std::vector<double, std::allocator<double> >::reference back(void);
         std::vector<double, std::allocator<double> >::const_reference back(void) const;
         std::vector<double, std::allocator<double> >::pointer data(void);
         std::vector<double, std::allocator<double> >::const_pointer data(void) const;
         void push_back(const std::vector<double, std::allocator<double> >::value_type &);
         void pop_back(void);
         std::vector<double, std::allocator<double> >::iterator insert(std::vector<double, std::allocator<double> >::iterator, const std::vector<double, std::allocator<double> >::value_type &);
         void insert(std::vector<double, std::allocator<double> >::iterator, std::vector<double, std::allocator<double> >::size_type, const std::vector<double, std::allocator<double> >::value_type &);
         std::vector<double, std::allocator<double> >::iterator erase(std::vector<double, std::allocator<double> >::iterator);
         std::vector<double, std::allocator<double> >::iterator erase(std::vector<double, std::allocator<double> >::iterator, std::vector<double, std::allocator<double> >::iterator);
         void swap(std::vector<double, std::allocator<double> > &);
         void clear(void);
       protected:
         void _M_fill_initialize(std::vector<double, std::allocator<double> >::size_type, const std::vector<double, std::allocator<double> >::value_type &);
         void _M_fill_assign(std::size_t, const std::vector<double, std::allocator<double> >::value_type &);
         void _M_fill_insert(std::vector<double, std::allocator<double> >::iterator, std::vector<double, std::allocator<double> >::size_type, const std::vector<double, std::allocator<double> >::value_type &);
         void _M_insert_aux(std::vector<double, std::allocator<double> >::iterator, const double &);
         std::vector<double, std::allocator<double> >::size_type _M_check_len(std::vector<double, std::allocator<double> >::size_type, const char *) const;
         void _M_erase_at_end(std::vector<double, std::allocator<double> >::pointer);
       public:
         void vector<int>(int, int, const std::vector<double, std::allocator<double> >::allocator_type &);
       protected:
         void _M_initialize_dispatch<int>(int, int, std::__true_type);

       public:
         typedef double value_type;
         typedef std::_Vector_base<double, std::allocator<double> >::pointer pointer;
         typedef __gnu_cxx::__alloc_traits<std::allocator<double> >::const_pointer const_pointer;
         typedef __gnu_cxx::__alloc_traits<std::allocator<double> >::reference reference;
         typedef __gnu_cxx::__alloc_traits<std::allocator<double> >::const_reference const_reference;
         typedef __gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > iterator;
         typedef __gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > > const_iterator;
         typedef std::reverse_iterator<__gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > > > const_reverse_iterator;
         typedef std::reverse_iterator<__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > > > reverse_iterator;
         typedef std::size_t size_type;
         typedef std::allocator<double> allocator_type;
     } * const this; computed at runtime
     unsigned long __n; computed at runtime
     const double &__value; computed at runtime
    block #036, object at 0x1881890 under 0x18854b0, 2 syms/buckets in 0x40331c..0x403341, function std::_Destroy<double*>(double*, double*)
     double *__first; computed at runtime
     double *__last; computed at runtime
    block #037, object at 0x1881bb0 under 0x18854b0, 2 syms/buckets in 0x403342..0x403367, function std::allocator<double>::allocator(std::allocator<double> const&)
     class std::allocator<double> : public __gnu_cxx::new_allocator<double> {
       public:
         allocator(void);
         allocator(const std::allocator<double> &);
         ~allocator();

         typedef std::size_t size_type;
         typedef double *pointer;
         typedef const double *const_pointer;
         typedef double &reference;
         typedef const double &const_reference;
     } * const this; computed at runtime
     const class std::allocator<double> : public __gnu_cxx::new_allocator<double> {
       public:
         allocator(void);
         allocator(const std::allocator<double> &);
         ~allocator();

         typedef std::size_t size_type;
         typedef double *pointer;
         typedef const double *const_pointer;
         typedef double &reference;
         typedef const double &const_reference;
     } &__a; computed at runtime
    block #038, object at 0x1881eb0 under 0x18854b0, 2 syms/buckets in 0x403368..0x40338a, function __gnu_cxx::new_allocator<double>::deallocate(double*, unsigned long)
     class __gnu_cxx::new_allocator<double> {
       public:
         new_allocator(void);
         new_allocator(const __gnu_cxx::new_allocator<double> &);
         ~new_allocator();
         __gnu_cxx::new_allocator<double>::pointer address(__gnu_cxx::new_allocator<double>::reference) const;
         __gnu_cxx::new_allocator<double>::const_pointer address(__gnu_cxx::new_allocator<double>::const_reference) const;
         __gnu_cxx::new_allocator<double>::pointer allocate(__gnu_cxx::new_allocator<double>::size_type, const void *);
         void deallocate(__gnu_cxx::new_allocator<double>::pointer, __gnu_cxx::new_allocator<double>::size_type);
         __gnu_cxx::new_allocator<double>::size_type max_size(void) const;
         void construct(__gnu_cxx::new_allocator<double>::pointer, const double &);
         void destroy(__gnu_cxx::new_allocator<double>::pointer);

         typedef std::size_t size_type;
         typedef double *pointer;
         typedef const double *const_pointer;
         typedef double &reference;
         typedef const double &const_reference;
     } * const this; computed at runtime
     double *__p; computed at runtime
    block #039, object at 0x1882190 under 0x18854b0, 2 syms/buckets in 0x40338a..0x4033cc, function __gnu_cxx::new_allocator<double>::allocate(unsigned long, void const*)
     class __gnu_cxx::new_allocator<double> {
       public:
         new_allocator(void);
         new_allocator(const __gnu_cxx::new_allocator<double> &);
         ~new_allocator();
         __gnu_cxx::new_allocator<double>::pointer address(__gnu_cxx::new_allocator<double>::reference) const;
         __gnu_cxx::new_allocator<double>::const_pointer address(__gnu_cxx::new_allocator<double>::const_reference) const;
         __gnu_cxx::new_allocator<double>::pointer allocate(__gnu_cxx::new_allocator<double>::size_type, const void *);
         void deallocate(__gnu_cxx::new_allocator<double>::pointer, __gnu_cxx::new_allocator<double>::size_type);
         __gnu_cxx::new_allocator<double>::size_type max_size(void) const;
         void construct(__gnu_cxx::new_allocator<double>::pointer, const double &);
         void destroy(__gnu_cxx::new_allocator<double>::pointer);

         typedef std::size_t size_type;
         typedef double *pointer;
         typedef const double *const_pointer;
         typedef double &reference;
         typedef const double &const_reference;
     } * const this; computed at runtime
     unsigned long __n; computed at runtime
    block #040, object at 0x18826a0 under 0x18854b0, 3 syms/buckets in 0x4033cc..0x4033fd, function std::__uninitialized_fill_n_a<double*, unsigned long, double, double>(double*, unsigned long, double const&, std::allocator<double>&)
     double *__first; computed at runtime
     unsigned long __n; computed at runtime
     const double &__x; computed at runtime
    block #041, object at 0x1882910 under 0x18854b0, 0 syms/buckets in 0x4033fd..0x40340b, function std::_Destroy_aux<true>::__destroy<double*>(double*, double*)
    block #042, object at 0x1882bb0 under 0x18854b0, 1 syms/buckets in 0x40340c..0x40341a, function __gnu_cxx::new_allocator<double>::new_allocator(__gnu_cxx::new_allocator<double> const&)
     class __gnu_cxx::new_allocator<double> {
       public:
         new_allocator(void);
         new_allocator(const __gnu_cxx::new_allocator<double> &);
         ~new_allocator();
         __gnu_cxx::new_allocator<double>::pointer address(__gnu_cxx::new_allocator<double>::reference) const;
         __gnu_cxx::new_allocator<double>::const_pointer address(__gnu_cxx::new_allocator<double>::const_reference) const;
         __gnu_cxx::new_allocator<double>::pointer allocate(__gnu_cxx::new_allocator<double>::size_type, const void *);
         void deallocate(__gnu_cxx::new_allocator<double>::pointer, __gnu_cxx::new_allocator<double>::size_type);
         __gnu_cxx::new_allocator<double>::size_type max_size(void) const;
         void construct(__gnu_cxx::new_allocator<double>::pointer, const double &);
         void destroy(__gnu_cxx::new_allocator<double>::pointer);

         typedef std::size_t size_type;
         typedef double *pointer;
         typedef const double *const_pointer;
         typedef double &reference;
         typedef const double &const_reference;
     } * const this; computed at runtime
    block #043, object at 0x1882e50 under 0x18854b0, 1 syms/buckets in 0x40341a..0x40342e, function __gnu_cxx::new_allocator<double>::max_size() const
     const class __gnu_cxx::new_allocator<double> {
       public:
         new_allocator(void);
         new_allocator(const __gnu_cxx::new_allocator<double> &);
         ~new_allocator();
         __gnu_cxx::new_allocator<double>::pointer address(__gnu_cxx::new_allocator<double>::reference) const;
         __gnu_cxx::new_allocator<double>::const_pointer address(__gnu_cxx::new_allocator<double>::const_reference) const;
         __gnu_cxx::new_allocator<double>::pointer allocate(__gnu_cxx::new_allocator<double>::size_type, const void *);
         void deallocate(__gnu_cxx::new_allocator<double>::pointer, __gnu_cxx::new_allocator<double>::size_type);
         __gnu_cxx::new_allocator<double>::size_type max_size(void) const;
         void construct(__gnu_cxx::new_allocator<double>::pointer, const double &);
         void destroy(__gnu_cxx::new_allocator<double>::pointer);

         typedef std::size_t size_type;
         typedef double *pointer;
         typedef const double *const_pointer;
         typedef double &reference;
         typedef const double &const_reference;
     } * const this; computed at runtime
    block #044, object at 0x18832c0 under 0x18854b0, 3 syms/buckets in 0x40342e..0x40345b, function std::uninitialized_fill_n<double*, unsigned long, double>(double*, unsigned long, double const&)
     double *__first; computed at runtime
     unsigned long __n; computed at runtime
     const double &__x; computed at runtime
    block #045, object at 0x1883760 under 0x18854b0, 3 syms/buckets in 0x40345b..0x403488, function std::__uninitialized_fill_n<true>::__uninit_fill_n<double*, unsigned long, double>(double*, unsigned long, double const&)
     double *__first; computed at runtime
     unsigned long __n; computed at runtime
     const double &__x; computed at runtime
    block #046, object at 0x1883c00 under 0x18854b0, 3 syms/buckets in 0x403488..0x4034bd, function std::fill_n<double*, unsigned long, double>(double*, unsigned long, double const&)
     double *__first; computed at runtime
     unsigned long __n; computed at runtime
     const double &__value; computed at runtime
    block #047, object at 0x1883ee0 under 0x18854b0, 1 syms/buckets in 0x4034bd..0x4034d7, function std::__niter_base<double*>(double*)
     double *__it; computed at runtime
    block #048, object at 0x1884540 under 0x18854b0, 3 syms/buckets in 0x4034d7..0x40351e, function std::__fill_n_a<double*, unsigned long, double>(double*, unsigned long, double const&)
     double *__first; computed at runtime
     unsigned long __n; computed at runtime
     const double &__value; computed at runtime
      block #049, object at 0x18844c0 under 0x1884540, 1 syms/buckets in 0x4034e7..0x40351c
       const double __tmp; computed at runtime
        block #050, object at 0x1884440 under 0x18844c0, 1 syms/buckets in 0x4034f2..0x403518
         unsigned long __niter; computed at runtime
    block #051, object at 0x18847a0 under 0x18854b0, 1 syms/buckets in 0x40351e..0x40352c, function std::_Iter_base<double*, false>::_S_base(double*)
     double *__it; computed at runtime


Symtab for file RtAudio.h
Compilation directory is /home/panties/Maximilian-master
Read from object file /home/panties/Giraffes/SymbolTableReader/src/tester (0x171c7c0)
Language: c++

Line table:

 line 0 at 0x402a9d
 line 246 at 0x402e0a
 line 247 at 0x402e12
 line 0 at 0x402e34
 line 588 at 0x402e34
 line 588 at 0x402e3c
 line 0 at 0x402e4e
 line 716 at 0x402e4e
 line 716 at 0x402e5a
 line 0 at 0x402e91
 line 719 at 0x402e92
 line 719 at 0x402e9e
 line 0 at 0x402ed5
 line 720 at 0x402ed6
 line 720 at 0x402ee2
 line 0 at 0x402f19
 line 721 at 0x402f1a
 line 721 at 0x402f26
 line 0 at 0x402f45
 line 722 at 0x402f46
 line 722 at 0x402f52
 line 0 at 0x402f71
 line 724 at 0x402f72
 line 724 at 0x402f7e
 line 0 at 0x402f8f
 line 0 at 0x402f90
 line 0 at 0x402faa
 line 0 at 0x402fc4
 line 0 at 0x403028
 line 0 at 0x40308e
 line 0 at 0x4030ae
 line 0 at 0x4030b8
 line 0 at 0x4030c2
 line 0 at 0x4030dc
 line 0 at 0x403102
 line 0 at 0x403174
 line 0 at 0x4031e4
 line 0 at 0x4031f2
 line 0 at 0x40321c
 line 0 at 0x403264
 line 0 at 0x403298
 line 0 at 0x4032d0
 line 0 at 0x40331c
 line 0 at 0x403342
 line 0 at 0x403368
 line 0 at 0x40338a
 line 0 at 0x4033cc
 line 0 at 0x4033fd
 line 0 at 0x40340c
 line 0 at 0x40341a
 line 0 at 0x40342e
 line 0 at 0x40345b
 line 0 at 0x403488
 line 0 at 0x4034bd
 line 0 at 0x4034d7
 line 0 at 0x40351e

Blockvector same as owning compunit: player.cpp


Symtab for file /usr/include/c++/4.8.2/bits/allocator.h
Compilation directory is /home/panties/Maximilian-master
Read from object file /home/panties/Giraffes/SymbolTableReader/src/tester (0x171c7c0)
Language: c++

Line table:

 line 113 at 0x402f90
 line 113 at 0x402f9c
 line 0 at 0x402faa
 line 121 at 0x402faa
 line 121 at 0x402fb6
 line 0 at 0x402fc4
 line 115 at 0x403342
 line 116 at 0x403352
 line 0 at 0x403367

Blockvector same as owning compunit: player.cpp


Symtab for file /usr/include/c++/4.8.2/bits/stl_vector.h
Compilation directory is /home/panties/Maximilian-master
Read from object file /home/panties/Giraffes/SymbolTableReader/src/tester (0x171c7c0)
Language: c++

Line table:

 line 398 at 0x402fc4
 line 400 at 0x402fdb
 line 404 at 0x402fee
 line 405 at 0x403005
 line 400 at 0x40300a
 line 405 at 0x403021
 line 0 at 0x403028
 line 414 at 0x403028
 line 416 at 0x403035
 line 415 at 0x403053
 line 416 at 0x40305e
 line 0 at 0x40308d
 line 770 at 0x40308e
 line 771 at 0x40309a
 line 0 at 0x4030ae
 line 79 at 0x4030c2
 line 79 at 0x4030ce
 line 0 at 0x4030dc
 line 127 at 0x4030dc
 line 128 at 0x4030ec
 line 0 at 0x403101
 line 159 at 0x403102
 line 161 at 0x40310f
 line 160 at 0x403135
 line 161 at 0x403144
 line 0 at 0x403173
 line 1161 at 0x403174
 line 1163 at 0x403186
 line 1165 at 0x4031a2
 line 1164 at 0x4031b6
 line 1166 at 0x4031be
 line 1167 at 0x4031e1
 line 0 at 0x4031e3
 line 113 at 0x4031e4
 line 114 at 0x4031ec
 line 0 at 0x4031f2
 line 90 at 0x40321c
 line 91 at 0x40322c
 line 92 at 0x403262
 line 0 at 0x403264
 line 171 at 0x403264
 line 173 at 0x403278
 line 174 at 0x40327f
 line 175 at 0x403296
 line 0 at 0x403298
 line 167 at 0x403298
 line 168 at 0x4032a8
 line 1212 at 0x4032d0
 line 1215 at 0x4032e4
 line 1214 at 0x4032fa
 line 1216 at 0x40330a
 line 1217 at 0x40331a
 line 0 at 0x40331c

Blockvector same as owning compunit: player.cpp


Symtab for file /usr/include/c++/4.8.2/ext/new_allocator.h
Compilation directory is /home/panties/Maximilian-master
Read from object file /home/panties/Giraffes/SymbolTableReader/src/tester (0x171c7c0)
Language: c++

Line table:

 line 79 at 0x4030ae
 line 79 at 0x4030b6
 line 0 at 0x4030b8
 line 86 at 0x4030b8
 line 86 at 0x4030c0
 line 0 at 0x4030c2
 line 109 at 0x403368
 line 110 at 0x40337c
 line 0 at 0x40338a
 line 99 at 0x40338a
 line 101 at 0x40339e
 line 102 at 0x4033b5
 line 104 at 0x4033ba
 line 105 at 0x4033ca
 line 0 at 0x4033cc
 line 81 at 0x40340c
 line 81 at 0x403418
 line 0 at 0x40341a
 line 113 at 0x40341a
 line 114 at 0x403422
 line 0 at 0x40342e

Blockvector same as owning compunit: player.cpp


Symtab for file /usr/include/c++/4.8.2/bits/stl_construct.h
Compilation directory is /home/panties/Maximilian-master
Read from object file /home/panties/Giraffes/SymbolTableReader/src/tester (0x171c7c0)
Language: c++

Line table:

 line 148 at 0x4031f2
 line 151 at 0x403206
 line 152 at 0x403219
 line 0 at 0x40321b
 line 122 at 0x40331c
 line 126 at 0x40332c
 line 128 at 0x40333f
 line 0 at 0x403341
 line 112 at 0x4033fd
 line 112 at 0x403409
 line 0 at 0x40340b

Blockvector same as owning compunit: player.cpp


Symtab for file /usr/include/c++/4.8.2/bits/stl_uninitialized.h
Compilation directory is /home/panties/Maximilian-master
Read from object file /home/panties/Giraffes/SymbolTableReader/src/tester (0x171c7c0)
Language: c++

Line table:

 line 332 at 0x4033cc
 line 334 at 0x4033e4
 line 0 at 0x4033fd
 line 218 at 0x40342e
 line 223 at 0x403442
 line 225 at 0x403459
 line 0 at 0x40345b
 line 202 at 0x40345b
 line 204 at 0x40346f
 line 0 at 0x403488

Blockvector same as owning compunit: player.cpp


Symtab for file /usr/include/c++/4.8.2/bits/stl_algobase.h
Compilation directory is /home/panties/Maximilian-master
Read from object file /home/panties/Giraffes/SymbolTableReader/src/tester (0x171c7c0)
Language: c++

Line table:

 line 781 at 0x403488
 line 786 at 0x40349c
 line 787 at 0x4034bb
 line 0 at 0x4034bd
 line 277 at 0x4034bd
 line 278 at 0x4034c9
 line 0 at 0x4034d7
 line 746 at 0x4034d7
 line 748 at 0x4034e7
 line 749 at 0x4034f2
 line 751 at 0x4034fc
 line 749 at 0x403507
 line 752 at 0x403518
 line 753 at 0x40351c
 line 0 at 0x40351e

Blockvector same as owning compunit: player.cpp


Symtab for file /usr/include/c++/4.8.2/bits/stl_iterator_base_types.h
Compilation directory is /home/panties/Maximilian-master
Read from object file /home/panties/Giraffes/SymbolTableReader/src/tester (0x171c7c0)
Language: c++

Line table:

 line 212 at 0x40351e
 line 213 at 0x403526
 line 0 at 0x40352c

Blockvector same as owning compunit: player.cpp


Symtab for file /usr/include/c++/4.8.2/iostream
Compilation directory is /home/panties/Maximilian-master
Read from object file /home/panties/Giraffes/SymbolTableReader/src/tester (0x171c7c0)
Language: c++

Line table:

 line 74 at 0x402dd4
 line 0 at 0x402df2

Blockvector same as owning compunit: player.cpp


Symtab for file /usr/include/libio.h
Compilation directory is /home/panties/Maximilian-master
Read from object file /home/panties/Giraffes/SymbolTableReader/src/tester (0x171c7c0)
Language: c++

Blockvector same as owning compunit: player.cpp


Symtab for file /usr/include/stdio.h
Compilation directory is /home/panties/Maximilian-master
Read from object file /home/panties/Giraffes/SymbolTableReader/src/tester (0x171c7c0)
Language: c++

Blockvector same as owning compunit: player.cpp


Symtab for file <built-in>
Compilation directory is /home/panties/Maximilian-master
Read from object file /home/panties/Giraffes/SymbolTableReader/src/tester (0x171c7c0)
Language: c++

Blockvector same as owning compunit: player.cpp


Symtab for file /usr/lib/gcc/x86_64-redhat-linux/4.8.5/include/stddef.h
Compilation directory is /home/panties/Maximilian-master
Read from object file /home/panties/Giraffes/SymbolTableReader/src/tester (0x171c7c0)
Language: c++

Blockvector same as owning compunit: player.cpp


Symtab for file /usr/include/wchar.h
Compilation directory is /home/panties/Maximilian-master
Read from object file /home/panties/Giraffes/SymbolTableReader/src/tester (0x171c7c0)
Language: c++

Blockvector same as owning compunit: player.cpp


Symtab for file /usr/include/c++/4.8.2/cwchar
Compilation directory is /home/panties/Maximilian-master
Read from object file /home/panties/Giraffes/SymbolTableReader/src/tester (0x171c7c0)
Language: c++

Blockvector same as owning compunit: player.cpp


Symtab for file /usr/include/c++/4.8.2/bits/char_traits.h
Compilation directory is /home/panties/Maximilian-master
Read from object file /home/panties/Giraffes/SymbolTableReader/src/tester (0x171c7c0)
Language: c++

Blockvector same as owning compunit: player.cpp


Symtab for file /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/c++config.h
Compilation directory is /home/panties/Maximilian-master
Read from object file /home/panties/Giraffes/SymbolTableReader/src/tester (0x171c7c0)
Language: c++

Blockvector same as owning compunit: player.cpp


Symtab for file /usr/include/c++/4.8.2/clocale
Compilation directory is /home/panties/Maximilian-master
Read from object file /home/panties/Giraffes/SymbolTableReader/src/tester (0x171c7c0)
Language: c++

Blockvector same as owning compunit: player.cpp


Symtab for file /usr/include/c++/4.8.2/bits/basic_string.h
Compilation directory is /home/panties/Maximilian-master
Read from object file /home/panties/Giraffes/SymbolTableReader/src/tester (0x171c7c0)
Language: c++

Blockvector same as owning compunit: player.cpp


Symtab for file /usr/include/c++/4.8.2/bits/basic_string.tcc
Compilation directory is /home/panties/Maximilian-master
Read from object file /home/panties/Giraffes/SymbolTableReader/src/tester (0x171c7c0)
Language: c++

Blockvector same as owning compunit: player.cpp


Symtab for file /usr/include/c++/4.8.2/bits/stringfwd.h
Compilation directory is /home/panties/Maximilian-master
Read from object file /home/panties/Giraffes/SymbolTableReader/src/tester (0x171c7c0)
Language: c++

Blockvector same as owning compunit: player.cpp


Symtab for file /usr/include/c++/4.8.2/bits/ios_base.h
Compilation directory is /home/panties/Maximilian-master
Read from object file /home/panties/Giraffes/SymbolTableReader/src/tester (0x171c7c0)
Language: c++

Blockvector same as owning compunit: player.cpp


Symtab for file /usr/include/c++/4.8.2/cwctype
Compilation directory is /home/panties/Maximilian-master
Read from object file /home/panties/Giraffes/SymbolTableReader/src/tester (0x171c7c0)
Language: c++

Blockvector same as owning compunit: player.cpp


Symtab for file /usr/include/c++/4.8.2/cstdio
Compilation directory is /home/panties/Maximilian-master
Read from object file /home/panties/Giraffes/SymbolTableReader/src/tester (0x171c7c0)
Language: c++

Blockvector same as owning compunit: player.cpp


Symtab for file /usr/include/c++/4.8.2/cstdlib
Compilation directory is /home/panties/Maximilian-master
Read from object file /home/panties/Giraffes/SymbolTableReader/src/tester (0x171c7c0)
Language: c++

Blockvector same as owning compunit: player.cpp


Symtab for file /usr/include/c++/4.8.2/bits/vector.tcc
Compilation directory is /home/panties/Maximilian-master
Read from object file /home/panties/Giraffes/SymbolTableReader/src/tester (0x171c7c0)
Language: c++

Blockvector same as owning compunit: player.cpp


Symtab for file /usr/include/c++/4.8.2/iosfwd
Compilation directory is /home/panties/Maximilian-master
Read from object file /home/panties/Giraffes/SymbolTableReader/src/tester (0x171c7c0)
Language: c++

Blockvector same as owning compunit: player.cpp


Symtab for file /usr/include/time.h
Compilation directory is /home/panties/Maximilian-master
Read from object file /home/panties/Giraffes/SymbolTableReader/src/tester (0x171c7c0)
Language: c++

Blockvector same as owning compunit: player.cpp


Symtab for file /usr/include/c++/4.8.2/ext/numeric_traits.h
Compilation directory is /home/panties/Maximilian-master
Read from object file /home/panties/Giraffes/SymbolTableReader/src/tester (0x171c7c0)
Language: c++

Blockvector same as owning compunit: player.cpp


Symtab for file /usr/include/c++/4.8.2/ext/alloc_traits.h
Compilation directory is /home/panties/Maximilian-master
Read from object file /home/panties/Giraffes/SymbolTableReader/src/tester (0x171c7c0)
Language: c++

Blockvector same as owning compunit: player.cpp


Symtab for file /usr/include/c++/4.8.2/bits/stl_iterator.h
Compilation directory is /home/panties/Maximilian-master
Read from object file /home/panties/Giraffes/SymbolTableReader/src/tester (0x171c7c0)
Language: c++

Blockvector same as owning compunit: player.cpp


Symtab for file /usr/include/c++/4.8.2/ext/type_traits.h
Compilation directory is /home/panties/Maximilian-master
Read from object file /home/panties/Giraffes/SymbolTableReader/src/tester (0x171c7c0)
Language: c++

Blockvector same as owning compunit: player.cpp


Symtab for file /usr/include/c++/4.8.2/debug/debug.h
Compilation directory is /home/panties/Maximilian-master
Read from object file /home/panties/Giraffes/SymbolTableReader/src/tester (0x171c7c0)
Language: c++

Blockvector same as owning compunit: player.cpp


Symtab for file /usr/include/locale.h
Compilation directory is /home/panties/Maximilian-master
Read from object file /home/panties/Giraffes/SymbolTableReader/src/tester (0x171c7c0)
Language: c++

Blockvector same as owning compunit: player.cpp


Symtab for file /usr/include/bits/types.h
Compilation directory is /home/panties/Maximilian-master
Read from object file /home/panties/Giraffes/SymbolTableReader/src/tester (0x171c7c0)
Language: c++

Blockvector same as owning compunit: player.cpp


Symtab for file /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/atomic_word.h
Compilation directory is /home/panties/Maximilian-master
Read from object file /home/panties/Giraffes/SymbolTableReader/src/tester (0x171c7c0)
Language: c++

Blockvector same as owning compunit: player.cpp


Symtab for file /usr/include/wctype.h
Compilation directory is /home/panties/Maximilian-master
Read from object file /home/panties/Giraffes/SymbolTableReader/src/tester (0x171c7c0)
Language: c++

Blockvector same as owning compunit: player.cpp


Symtab for file /usr/include/_G_config.h
Compilation directory is /home/panties/Maximilian-master
Read from object file /home/panties/Giraffes/SymbolTableReader/src/tester (0x171c7c0)
Language: c++

Blockvector same as owning compunit: player.cpp


Symtab for file /usr/include/stdlib.h
Compilation directory is /home/panties/Maximilian-master
Read from object file /home/panties/Giraffes/SymbolTableReader/src/tester (0x171c7c0)
Language: c++

Blockvector same as owning compunit: player.cpp


Symtab for file maximilian.h
Compilation directory is /home/panties/Maximilian-master
Read from object file /home/panties/Giraffes/SymbolTableReader/src/tester (0x171c7c0)
Language: c++

Blockvector same as owning compunit: player.cpp


Symtab for file RtError.h
Compilation directory is /home/panties/Maximilian-master
Read from object file /home/panties/Giraffes/SymbolTableReader/src/tester (0x171c7c0)
Language: c++

Blockvector same as owning compunit: player.cpp


Symtab for file /usr/include/c++/4.8.2/bits/cpp_type_traits.h
Compilation directory is /home/panties/Maximilian-master
Read from object file /home/panties/Giraffes/SymbolTableReader/src/tester (0x171c7c0)
Language: c++

Blockvector same as owning compunit: player.cpp

